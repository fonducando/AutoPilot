
AutoPilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d1c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009fe8  08009fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a068  0800a068  0001a068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a070  0800a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  0800a078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000168  0800a1e0  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240001c8  0800a240  000201c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  24000228  0800a2a0  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000cd4  0800a2a0  00020cd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cc31  00000000  00000000  00020256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ee  00000000  00000000  0004ce87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00051778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  00052d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000366df  00000000  00000000  00054120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9a0  00000000  00000000  0008a7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014e907  00000000  00000000  000a619f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f4aa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab4  00000000  00000000  001f4afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000228 	.word	0x24000228
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009fd0 	.word	0x08009fd0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400022c 	.word	0x2400022c
 8000308:	08009fd0 	.word	0x08009fd0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fc18 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f940 	bl	8000894 <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f866 	bl	80006e4 <MX_ETH_Init>
  MX_I2C1_Init();
 8000618:	f000 f8b0 	bl	800077c <MX_I2C1_Init>
  MX_UART4_Init();
 800061c:	f000 f8ee 	bl	80007fc <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8000620:	f009 f878 	bl	8009714 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x20>
	...

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	; 0x70
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	224c      	movs	r2, #76	; 0x4c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f009 fcc2 	bl	8009fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2220      	movs	r2, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 fcbc 	bl	8009fc0 <memset>
  /** Supply configuration update enable
  */
 // HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xb8>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <SystemClock_Config+0xb8>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemClock_Config+0xb8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000668:	bf00      	nop
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemClock_Config+0xb8>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000676:	d1f8      	bne.n	800066a <SystemClock_Config+0x42>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000678:	2322      	movs	r3, #34	; 0x22
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800067c:	2301      	movs	r3, #1
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fe7f 	bl	8003394 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800069c:	f000 f95c 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	233f      	movs	r3, #63	; 0x3f
 80006a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f9f2 	bl	8003ab0 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d2:	f000 f941 	bl	8000958 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3770      	adds	r7, #112	; 0x70
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	58024800 	.word	0x58024800

080006e4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ETH_Init+0x80>)
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <MX_ETH_Init+0x84>)
 80006ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ETH_Init+0x88>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ETH_Init+0x88>)
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ETH_Init+0x88>)
 80006fc:	22e1      	movs	r2, #225	; 0xe1
 80006fe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ETH_Init+0x88>)
 8000702:	2200      	movs	r2, #0
 8000704:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ETH_Init+0x88>)
 8000708:	2200      	movs	r2, #0
 800070a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ETH_Init+0x88>)
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ETH_Init+0x80>)
 8000714:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_ETH_Init+0x88>)
 8000716:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ETH_Init+0x80>)
 800071a:	2201      	movs	r2, #1
 800071c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ETH_Init+0x80>)
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_ETH_Init+0x8c>)
 8000722:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ETH_Init+0x80>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_ETH_Init+0x90>)
 8000728:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_ETH_Init+0x80>)
 800072c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000730:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_ETH_Init+0x80>)
 8000734:	f000 fd5c 	bl	80011f0 <HAL_ETH_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800073e:	f000 f90b 	bl	8000958 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_ETH_Init+0x94>)
 8000748:	f009 fc3a 	bl	8009fc0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_ETH_Init+0x94>)
 800074e:	2221      	movs	r2, #33	; 0x21
 8000750:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_ETH_Init+0x94>)
 8000754:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000758:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_ETH_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2400033c 	.word	0x2400033c
 8000768:	40028000 	.word	0x40028000
 800076c:	24000244 	.word	0x24000244
 8000770:	240001c8 	.word	0x240001c8
 8000774:	24000168 	.word	0x24000168
 8000778:	240003c4 	.word	0x240003c4

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_I2C1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_I2C1_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_I2C1_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007b8:	f001 faf2 	bl	8001da0 <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 f8c9 	bl	8000958 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007ca:	f001 fb79 	bl	8001ec0 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 f8c0 	bl	8000958 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007dc:	f001 fbbb 	bl	8001f56 <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f8b7 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	24000260 	.word	0x24000260
 80007f4:	40005400 	.word	0x40005400
 80007f8:	00707cbb 	.word	0x00707cbb

080007fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_UART4_Init+0x90>)
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <MX_UART4_Init+0x94>)
 8000804:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_UART4_Init+0x90>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_UART4_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_UART4_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_UART4_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_UART4_Init+0x90>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_UART4_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_UART4_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_UART4_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_UART4_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_UART4_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000844:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_UART4_Init+0x90>)
 8000846:	f004 ffdb 	bl	8005800 <HAL_UART_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000850:	f000 f882 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_UART4_Init+0x90>)
 8000858:	f006 f826 	bl	80068a8 <HAL_UARTEx_SetTxFifoThreshold>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000862:	f000 f879 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <MX_UART4_Init+0x90>)
 800086a:	f006 f85b 	bl	8006924 <HAL_UARTEx_SetRxFifoThreshold>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000874:	f000 f870 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_UART4_Init+0x90>)
 800087a:	f005 ffdc 	bl	8006836 <HAL_UARTEx_DisableFifoMode>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 f868 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	240002ac 	.word	0x240002ac
 8000890:	40004c00 	.word	0x40004c00

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a20      	ldr	r2, [pc, #128]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_GPIO_Init+0xbc>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_GPIO_Init+0xbc>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <MX_GPIO_Init+0xbc>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_GPIO_Init+0xbc>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Elevator_Enable_Pin|Aileron_Dir_Pin|Elevator_Dir_Pin|Aileron_Enable_Pin
 8000922:	2200      	movs	r2, #0
 8000924:	213f      	movs	r1, #63	; 0x3f
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0xc0>)
 8000928:	f001 fa20 	bl	8001d6c <HAL_GPIO_WritePin>
                          |Ailerons_Step_Pin|Elevator_Step_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Elevator_Enable_Pin Aileron_Dir_Pin Elevator_Dir_Pin Aileron_Enable_Pin
                           Ailerons_Step_Pin Elevator_Step_Pin */
  GPIO_InitStruct.Pin = Elevator_Enable_Pin|Aileron_Dir_Pin|Elevator_Dir_Pin|Aileron_Enable_Pin
 800092c:	233f      	movs	r3, #63	; 0x3f
 800092e:	617b      	str	r3, [r7, #20]
                          |Ailerons_Step_Pin|Elevator_Step_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0xc0>)
 8000944:	f001 f86a 	bl	8001a1c <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58024400 	.word	0x58024400
 8000954:	58020c00 	.word	0x58020c00

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_MspInit+0x30>)
 800096c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x30>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x30>)
 800097c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	58024400 	.word	0x58024400

08000998 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a49      	ldr	r2, [pc, #292]	; (8000adc <HAL_ETH_MspInit+0x144>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	f040 808b 	bne.w	8000ad2 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80009bc:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 80009be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009c2:	4a47      	ldr	r2, [pc, #284]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 80009c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 80009ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009d6:	623b      	str	r3, [r7, #32]
 80009d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 80009dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009e0:	4a3f      	ldr	r2, [pc, #252]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 80009e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009ea:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 80009ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f4:	61fb      	str	r3, [r7, #28]
 80009f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 80009fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009fe:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a08:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a30      	ldr	r2, [pc, #192]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	4a29      	ldr	r2, [pc, #164]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <HAL_ETH_MspInit+0x148>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> ETH_TXD1
    PA7     ------> ETH_CRS_DV
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a70:	2332      	movs	r3, #50	; 0x32
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a80:	230b      	movs	r3, #11
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <HAL_ETH_MspInit+0x14c>)
 8000a8c:	f000 ffc6 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a90:	2386      	movs	r3, #134	; 0x86
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa0:	230b      	movs	r3, #11
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <HAL_ETH_MspInit+0x150>)
 8000aac:	f000 ffb6 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8000ab0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac2:	230b      	movs	r3, #11
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <HAL_ETH_MspInit+0x154>)
 8000ace:	f000 ffa5 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3738      	adds	r7, #56	; 0x38
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40028000 	.word	0x40028000
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	58020800 	.word	0x58020800
 8000ae8:	58020000 	.word	0x58020000
 8000aec:	58020400 	.word	0x58020400

08000af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0b6      	sub	sp, #216	; 0xd8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	22b4      	movs	r2, #180	; 0xb4
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f009 fa55 	bl	8009fc0 <memset>
  if(hi2c->Instance==I2C1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a25      	ldr	r2, [pc, #148]	; (8000bb0 <HAL_I2C_MspInit+0xc0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d142      	bne.n	8000ba6 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b20:	2308      	movs	r3, #8
 8000b22:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fb4a 	bl	80041c8 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b3a:	f7ff ff0d 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_I2C_MspInit+0xc4>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <HAL_I2C_MspInit+0xc4>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_I2C_MspInit+0xc4>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b76:	2304      	movs	r3, #4
 8000b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <HAL_I2C_MspInit+0xc8>)
 8000b84:	f000 ff4a 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_I2C_MspInit+0xc4>)
 8000b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <HAL_I2C_MspInit+0xc4>)
 8000b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_I2C_MspInit+0xc4>)
 8000b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	37d8      	adds	r7, #216	; 0xd8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020400 	.word	0x58020400

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0b6      	sub	sp, #216	; 0xd8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	22b4      	movs	r2, #180	; 0xb4
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f009 f9ef 	bl	8009fc0 <memset>
  if(huart->Instance==UART4)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <HAL_UART_MspInit+0xc0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d142      	bne.n	8000c72 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 fae4 	bl	80041c8 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c06:	f7ff fea7 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xc4>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000c46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c60:	2308      	movs	r3, #8
 8000c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_UART_MspInit+0xc8>)
 8000c6e:	f000 fed5 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	37d8      	adds	r7, #216	; 0xd8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004c00 	.word	0x40004c00
 8000c80:	58024400 	.word	0x58024400
 8000c84:	58020800 	.word	0x58020800

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f924 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <OTG_HS_IRQHandler+0x10>)
 8000ce2:	f001 fadb 	bl	800229c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	240008cc 	.word	0x240008cc

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <SystemInit+0xd8>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <SystemInit+0xd8>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <SystemInit+0xdc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	d807      	bhi.n	8000d20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <SystemInit+0xdc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <SystemInit+0xdc>)
 8000d1a:	f043 0307 	orr.w	r3, r3, #7
 8000d1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <SystemInit+0xe0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <SystemInit+0xe0>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <SystemInit+0xe0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <SystemInit+0xe0>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4926      	ldr	r1, [pc, #152]	; (8000dd0 <SystemInit+0xe0>)
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <SystemInit+0xe4>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <SystemInit+0xdc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <SystemInit+0xdc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 030f 	bic.w	r3, r3, #15
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <SystemInit+0xdc>)
 8000d54:	f043 0307 	orr.w	r3, r3, #7
 8000d58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <SystemInit+0xe0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <SystemInit+0xe0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <SystemInit+0xe0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <SystemInit+0xe0>)
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <SystemInit+0xe8>)
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <SystemInit+0xe0>)
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <SystemInit+0xec>)
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <SystemInit+0xe0>)
 8000d7a:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <SystemInit+0xf0>)
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <SystemInit+0xe0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <SystemInit+0xe0>)
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <SystemInit+0xf0>)
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <SystemInit+0xe0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <SystemInit+0xe0>)
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <SystemInit+0xf0>)
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <SystemInit+0xe0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <SystemInit+0xe0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <SystemInit+0xe0>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <SystemInit+0xe0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <SystemInit+0xf4>)
 8000db0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000db4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SystemInit+0xd8>)
 8000db8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dbc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	52002000 	.word	0x52002000
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dd8:	02020200 	.word	0x02020200
 8000ddc:	01ff0000 	.word	0x01ff0000
 8000de0:	01010280 	.word	0x01010280
 8000de4:	52004000 	.word	0x52004000

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dec:	f7ff ff80 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	; (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f009 f8af 	bl	8009f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fbf3 	bl	8000604 <main>
  bx  lr
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e28:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8000e2c:	0800a078 	.word	0x0800a078
  ldr r2, =_sbss
 8000e30:	24000228 	.word	0x24000228
  ldr r4, =_ebss
 8000e34:	24000cd4 	.word	0x24000cd4

08000e38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC3_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 f994 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e48:	f002 ffe8 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_Init+0x68>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	0a1b      	lsrs	r3, r3, #8
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <HAL_Init+0x6c>)
 8000e5a:	5ccb      	ldrb	r3, [r1, r3]
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_Init+0x68>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_Init+0x6c>)
 8000e70:	5cd3      	ldrb	r3, [r2, r3]
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_Init+0x70>)
 8000e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_Init+0x74>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e86:	200f      	movs	r0, #15
 8000e88:	f000 f814 	bl	8000eb4 <HAL_InitTick>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e002      	b.n	8000e9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e96:	f7ff fd65 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	0800a030 	.word	0x0800a030
 8000eac:	24000004 	.word	0x24000004
 8000eb0:	24000000 	.word	0x24000000

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_InitTick+0x60>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e021      	b.n	8000f0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_InitTick+0x64>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_InitTick+0x60>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f979 	bl	80011d6 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f943 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x68>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2400000c 	.word	0x2400000c
 8000f18:	24000000 	.word	0x24000000
 8000f1c:	24000008 	.word	0x24000008

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	2400000c 	.word	0x2400000c
 8000f44:	240003f8 	.word	0x240003f8

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	240003f8 	.word	0x240003f8

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2400000c 	.word	0x2400000c

08000fa8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000fb8:	4904      	ldr	r1, [pc, #16]	; (8000fcc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	58000400 	.word	0x58000400

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	05fa0000 	.word	0x05fa0000

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff40 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff33 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa4 	bl	800112c <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e0c6      	b.n	8001390 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fbc4 	bl	8000998 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2223      	movs	r2, #35	; 0x23
 8001214:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b60      	ldr	r3, [pc, #384]	; (8001398 <HAL_ETH_Init+0x1a8>)
 8001218:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800121c:	4a5e      	ldr	r2, [pc, #376]	; (8001398 <HAL_ETH_Init+0x1a8>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001226:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <HAL_ETH_Init+0x1a8>)
 8001228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7a1b      	ldrb	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff feb3 	bl	8000fa8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001242:	e003      	b.n	800124c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001244:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001248:	f7ff feae 	bl	8000fa8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001264:	f7ff fe70 	bl	8000f48 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800126a:	e00f      	b.n	800128c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800126c:	f7ff fe6c 	bl	8000f48 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127a:	d907      	bls.n	800128c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2204      	movs	r2, #4
 8001280:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	22e0      	movs	r2, #224	; 0xe0
 8001286:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e081      	b.n	8001390 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1e6      	bne.n	800126c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fac0 	bl	8001824 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012a4:	f002 ff34 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a3c      	ldr	r2, [pc, #240]	; (800139c <HAL_ETH_Init+0x1ac>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0c9a      	lsrs	r2, r3, #18
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3a01      	subs	r2, #1
 80012b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fa13 	bl	80016e8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012d8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012dc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	22e0      	movs	r2, #224	; 0xe0
 80012f4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e04a      	b.n	8001390 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	f241 1308 	movw	r3, #4360	; 0x1108
 8001302:	4413      	add	r3, r2
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_ETH_Init+0x1b0>)
 8001308:	4013      	ands	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6952      	ldr	r2, [r2, #20]
 800130e:	0052      	lsls	r2, r2, #1
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	f241 1308 	movw	r3, #4360	; 0x1108
 800131a:	440b      	add	r3, r1
 800131c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fad8 	bl	80018d4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fb1c 	bl	8001962 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	3305      	adds	r3, #5
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	021a      	lsls	r2, r3, #8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	3303      	adds	r3, #3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	061a      	lsls	r2, r3, #24
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	3302      	adds	r3, #2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	041b      	lsls	r3, r3, #16
 800135c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001368:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001376:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001378:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2210      	movs	r2, #16
 8001386:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2210      	movs	r2, #16
 800138c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	58024400 	.word	0x58024400
 800139c:	431bde83 	.word	0x431bde83
 80013a0:	ffff8001 	.word	0xffff8001

080013a4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80013b6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80013be:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
 80013c4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80013c6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	7b5b      	ldrb	r3, [r3, #13]
 80013cc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80013ce:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	7b9b      	ldrb	r3, [r3, #14]
 80013d4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80013d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	7bdb      	ldrb	r3, [r3, #15]
 80013dc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80013de:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	7c12      	ldrb	r2, [r2, #16]
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d102      	bne.n	80013ee <ETH_SetMACConfig+0x4a>
 80013e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ec:	e000      	b.n	80013f0 <ETH_SetMACConfig+0x4c>
 80013ee:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80013f0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	7c52      	ldrb	r2, [r2, #17]
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d102      	bne.n	8001400 <ETH_SetMACConfig+0x5c>
 80013fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013fe:	e000      	b.n	8001402 <ETH_SetMACConfig+0x5e>
 8001400:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001402:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	7c9b      	ldrb	r3, [r3, #18]
 8001408:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800140a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001410:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001416:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	7f1b      	ldrb	r3, [r3, #28]
 800141c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800141e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	7f5b      	ldrb	r3, [r3, #29]
 8001424:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001426:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	7f92      	ldrb	r2, [r2, #30]
 800142c:	2a00      	cmp	r2, #0
 800142e:	d102      	bne.n	8001436 <ETH_SetMACConfig+0x92>
 8001430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001434:	e000      	b.n	8001438 <ETH_SetMACConfig+0x94>
 8001436:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001438:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7fdb      	ldrb	r3, [r3, #31]
 800143e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001440:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001448:	2a00      	cmp	r2, #0
 800144a:	d102      	bne.n	8001452 <ETH_SetMACConfig+0xae>
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	e000      	b.n	8001454 <ETH_SetMACConfig+0xb0>
 8001452:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001454:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800145a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001462:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001464:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <ETH_SetMACConfig+0x22c>)
 8001476:	4013      	ands	r3, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	430b      	orrs	r3, r1
 8001480:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800148e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001490:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001498:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800149a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014a2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80014a4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d102      	bne.n	80014b6 <ETH_SetMACConfig+0x112>
 80014b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014b4:	e000      	b.n	80014b8 <ETH_SetMACConfig+0x114>
 80014b6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80014b8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80014be:	4313      	orrs	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <ETH_SetMACConfig+0x230>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	68f9      	ldr	r1, [r7, #12]
 80014d2:	430b      	orrs	r3, r1
 80014d4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014dc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <ETH_SetMACConfig+0x234>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	68f9      	ldr	r1, [r7, #12]
 80014f6:	430b      	orrs	r3, r1
 80014f8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001500:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001506:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800150e:	2a00      	cmp	r2, #0
 8001510:	d101      	bne.n	8001516 <ETH_SetMACConfig+0x172>
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	e000      	b.n	8001518 <ETH_SetMACConfig+0x174>
 8001516:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001518:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800152a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800152e:	4013      	ands	r3, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	68f9      	ldr	r1, [r7, #12]
 8001536:	430b      	orrs	r3, r1
 8001538:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001540:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001548:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001556:	f023 0103 	bic.w	r1, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	430a      	orrs	r2, r1
 8001562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800156e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800158a:	2a00      	cmp	r2, #0
 800158c:	d101      	bne.n	8001592 <ETH_SetMACConfig+0x1ee>
 800158e:	2240      	movs	r2, #64	; 0x40
 8001590:	e000      	b.n	8001594 <ETH_SetMACConfig+0x1f0>
 8001592:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001594:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800159c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800159e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80015a6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80015b4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	430a      	orrs	r2, r1
 80015c0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	00048083 	.word	0x00048083
 80015d4:	c0f88000 	.word	0xc0f88000
 80015d8:	fffffef0 	.word	0xfffffef0

080015dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <ETH_SetDMAConfig+0xf8>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	6809      	ldr	r1, [r1, #0]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001602:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800160e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7b1b      	ldrb	r3, [r3, #12]
 8001614:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001616:	4313      	orrs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001622:	4413      	add	r3, r2
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <ETH_SetDMAConfig+0xfc>)
 8001628:	4013      	ands	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	431a      	orrs	r2, r3
 8001632:	f241 0304 	movw	r3, #4100	; 0x1004
 8001636:	440b      	add	r3, r1
 8001638:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	7b5b      	ldrb	r3, [r3, #13]
 800163e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001644:	4313      	orrs	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <ETH_SetDMAConfig+0x100>)
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6811      	ldr	r1, [r2, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	431a      	orrs	r2, r3
 800165e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001662:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	7d1b      	ldrb	r3, [r3, #20]
 800166c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800166e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	7f5b      	ldrb	r3, [r3, #29]
 8001674:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001682:	4413      	add	r3, r2
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <ETH_SetDMAConfig+0x104>)
 8001688:	4013      	ands	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6811      	ldr	r1, [r2, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	431a      	orrs	r2, r3
 8001692:	f241 1304 	movw	r3, #4356	; 0x1104
 8001696:	440b      	add	r3, r1
 8001698:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	7f1b      	ldrb	r3, [r3, #28]
 800169e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f241 1308 	movw	r3, #4360	; 0x1108
 80016b0:	4413      	add	r3, r2
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <ETH_SetDMAConfig+0x108>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6811      	ldr	r1, [r2, #0]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	431a      	orrs	r2, r3
 80016c0:	f241 1308 	movw	r3, #4360	; 0x1108
 80016c4:	440b      	add	r3, r1
 80016c6:	601a      	str	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	ffff87fd 	.word	0xffff87fd
 80016d8:	ffff2ffe 	.word	0xffff2ffe
 80016dc:	fffec000 	.word	0xfffec000
 80016e0:	ffc0efef 	.word	0xffc0efef
 80016e4:	7fc0ffff 	.word	0x7fc0ffff

080016e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0a4      	sub	sp, #144	; 0x90
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800170c:	2301      	movs	r3, #1
 800170e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001712:	2301      	movs	r3, #1
 8001714:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001728:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001730:	2300      	movs	r3, #0
 8001732:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001740:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001744:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001762:	2300      	movs	r3, #0
 8001764:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001766:	2300      	movs	r3, #0
 8001768:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800176a:	2300      	movs	r3, #0
 800176c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001780:	2320      	movs	r3, #32
 8001782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001792:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80017bc:	2301      	movs	r3, #1
 80017be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80017c2:	2300      	movs	r3, #0
 80017c4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fde6 	bl	80013a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017d8:	2301      	movs	r3, #1
 80017da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001800:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001808:	f44f 7306 	mov.w	r3, #536	; 0x218
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fee1 	bl	80015dc <ETH_SetDMAConfig>
}
 800181a:	bf00      	nop
 800181c:	3790      	adds	r7, #144	; 0x90
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001834:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800183c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800183e:	f002 fc67 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8001842:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d908      	bls.n	800185e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d804      	bhi.n	800185e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e027      	b.n	80018ae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d908      	bls.n	8001878 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d204      	bcs.n	8001878 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e01a      	b.n	80018ae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d303      	bcc.n	8001888 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d911      	bls.n	80018ac <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d908      	bls.n	80018a2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d804      	bhi.n	80018a2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e005      	b.n	80018ae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e000      	b.n	80018ae <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018ac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	01312cff 	.word	0x01312cff
 80018c4:	02160ebf 	.word	0x02160ebf
 80018c8:	03938700 	.word	0x03938700
 80018cc:	05f5e0ff 	.word	0x05f5e0ff
 80018d0:	08f0d17f 	.word	0x08f0d17f

080018d4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e01d      	b.n	800191e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	3206      	adds	r2, #6
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3301      	adds	r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d9de      	bls.n	80018e2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001932:	4413      	add	r3, r2
 8001934:	2203      	movs	r2, #3
 8001936:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68d9      	ldr	r1, [r3, #12]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f241 1314 	movw	r3, #4372	; 0x1114
 8001944:	4413      	add	r3, r2
 8001946:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e024      	b.n	80019ba <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3310      	adds	r3, #16
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d9d7      	bls.n	8001970 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	f241 1330 	movw	r3, #4400	; 0x1130
 80019e6:	4413      	add	r3, r2
 80019e8:	2203      	movs	r2, #3
 80019ea:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6919      	ldr	r1, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80019f8:	4413      	add	r3, r2
 80019fa:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	f241 1328 	movw	r3, #4392	; 0x1128
 8001a0c:	4413      	add	r3, r2
 8001a0e:	6019      	str	r1, [r3, #0]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a2a:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <HAL_GPIO_Init+0x228>)
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a2e:	e18c      	b.n	8001d4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 817e 	beq.w	8001d44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d00b      	beq.n	8001a68 <HAL_GPIO_Init+0x4c>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5c:	2b11      	cmp	r3, #17
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0xee>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d123      	bne.n	8001b52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	69b9      	ldr	r1, [r7, #24]
 8001b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80d8 	beq.w	8001d44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <HAL_GPIO_Init+0x22c>)
 8001b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b9a:	4a2b      	ldr	r2, [pc, #172]	; (8001c48 <HAL_GPIO_Init+0x22c>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_GPIO_Init+0x22c>)
 8001ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb2:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_GPIO_Init+0x230>)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_GPIO_Init+0x234>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d04a      	beq.n	8001c74 <HAL_GPIO_Init+0x258>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <HAL_GPIO_Init+0x238>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02b      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_GPIO_Init+0x23c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d025      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_GPIO_Init+0x240>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01f      	beq.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x244>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x216>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_GPIO_Init+0x248>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_GPIO_Init+0x24c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a16      	ldr	r2, [pc, #88]	; (8001c6c <HAL_GPIO_Init+0x250>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x20a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_GPIO_Init+0x254>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x206>
 8001c1e:	2309      	movs	r3, #9
 8001c20:	e029      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c22:	230a      	movs	r3, #10
 8001c24:	e027      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e025      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e023      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e021      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e01f      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e01d      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e01b      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e019      	b.n	8001c76 <HAL_GPIO_Init+0x25a>
 8001c42:	bf00      	nop
 8001c44:	58000080 	.word	0x58000080
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58000400 	.word	0x58000400
 8001c50:	58020000 	.word	0x58020000
 8001c54:	58020400 	.word	0x58020400
 8001c58:	58020800 	.word	0x58020800
 8001c5c:	58020c00 	.word	0x58020c00
 8001c60:	58021000 	.word	0x58021000
 8001c64:	58021400 	.word	0x58021400
 8001c68:	58021800 	.word	0x58021800
 8001c6c:	58021c00 	.word	0x58021c00
 8001c70:	58022400 	.word	0x58022400
 8001c74:	2300      	movs	r3, #0
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	f002 0203 	and.w	r2, r2, #3
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c86:	4938      	ldr	r1, [pc, #224]	; (8001d68 <HAL_GPIO_Init+0x34c>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3301      	adds	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f ae6b 	bne.w	8001a30 <HAL_GPIO_Init+0x14>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3724      	adds	r7, #36	; 0x24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	58000400 	.word	0x58000400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07f      	b.n	8001eb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fe92 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	; 0x24
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e006      	b.n	8001e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d104      	bne.n	8001e3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_I2C_Init+0x11c>)
 8001e46:	430b      	orrs	r3, r1
 8001e48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	ea42 0103 	orr.w	r1, r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	021a      	lsls	r2, r3, #8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69d9      	ldr	r1, [r3, #28]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	02008000 	.word	0x02008000

08001ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d138      	bne.n	8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e032      	b.n	8001f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d139      	bne.n	8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e033      	b.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2224      	movs	r2, #36	; 0x24
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff0:	b08f      	sub	sp, #60	; 0x3c
 8001ff2:	af0a      	add	r7, sp, #40	; 0x28
 8001ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e116      	b.n	800222e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f007 fcb2 	bl	8009984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2203      	movs	r2, #3
 8002024:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fe1d 	bl	8006c7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	687e      	ldr	r6, [r7, #4]
 800204c:	466d      	mov	r5, sp
 800204e:	f106 0410 	add.w	r4, r6, #16
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800205e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002062:	1d33      	adds	r3, r6, #4
 8002064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	f004 fce8 	bl	8006a3c <USB_CoreInit>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0d7      	b.n	800222e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f004 fe0b 	bl	8006ca0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e04a      	b.n	8002126 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	333d      	adds	r3, #61	; 0x3d
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	333c      	adds	r3, #60	; 0x3c
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	b298      	uxth	r0, r3
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3342      	adds	r3, #66	; 0x42
 80020cc:	4602      	mov	r2, r0
 80020ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	333f      	adds	r3, #63	; 0x3f
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3344      	adds	r3, #68	; 0x44
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	3348      	adds	r3, #72	; 0x48
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3350      	adds	r3, #80	; 0x50
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3301      	adds	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d3af      	bcc.n	8002090 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e044      	b.n	80021c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	3301      	adds	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d3b5      	bcc.n	8002136 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	687e      	ldr	r6, [r7, #4]
 80021d2:	466d      	mov	r5, sp
 80021d4:	f106 0410 	add.w	r4, r6, #16
 80021d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e8:	1d33      	adds	r3, r6, #4
 80021ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ec:	6838      	ldr	r0, [r7, #0]
 80021ee:	f004 fd81 	bl	8006cf4 <USB_DevInit>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e014      	b.n	800222e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f001 f879 	bl	8003314 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f005 fe01 	bl	8007e2e <USB_DevDisconnect>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002236 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_PCD_Start+0x1c>
 800224e:	2302      	movs	r3, #2
 8002250:	e020      	b.n	8002294 <HAL_PCD_Start+0x5e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d109      	bne.n	8002276 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fcee 	bl	8006c5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f005 fdb1 	bl	8007dec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b08d      	sub	sp, #52	; 0x34
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f005 fe6f 	bl	8007f96 <USB_GetMode>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 83ca 	bne.w	8002a54 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f005 fdd3 	bl	8007e70 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 83c0 	beq.w	8002a52 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 fdca 	bl	8007e70 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f002 0202 	and.w	r2, r2, #2
 80022f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f005 fdb8 	bl	8007e70 <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b10      	cmp	r3, #16
 8002308:	d161      	bne.n	80023ce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0210 	bic.w	r2, r2, #16
 8002318:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 020f 	and.w	r2, r3, #15
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	3304      	adds	r3, #4
 8002338:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	0c5b      	lsrs	r3, r3, #17
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	2b02      	cmp	r3, #2
 8002344:	d124      	bne.n	8002390 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d035      	beq.n	80023be <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800235c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6a38      	ldr	r0, [r7, #32]
 8002366:	f005 fbef 	bl	8007b48 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002376:	441a      	add	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002388:	441a      	add	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	619a      	str	r2, [r3, #24]
 800238e:	e016      	b.n	80023be <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	0c5b      	lsrs	r3, r3, #17
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	2b06      	cmp	r3, #6
 800239a:	d110      	bne.n	80023be <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023a2:	2208      	movs	r2, #8
 80023a4:	4619      	mov	r1, r3
 80023a6:	6a38      	ldr	r0, [r7, #32]
 80023a8:	f005 fbce 	bl	8007b48 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b8:	441a      	add	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0210 	orr.w	r2, r2, #16
 80023cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 fd4c 	bl	8007e70 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023e2:	d16e      	bne.n	80024c2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 fd52 	bl	8007e96 <USB_ReadDevAllOutEpInterrupt>
 80023f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023f4:	e062      	b.n	80024bc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d057      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f005 fd77 	bl	8007efe <USB_ReadDevOutEPInterrupt>
 8002410:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00c      	beq.n	8002436 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002428:	461a      	mov	r2, r3
 800242a:	2301      	movs	r3, #1
 800242c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800242e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fdc5 	bl	8002fc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	2308      	movs	r3, #8
 8002450:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 febf 	bl	80031d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	2310      	movs	r3, #16
 8002474:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248c:	461a      	mov	r2, r3
 800248e:	2320      	movs	r3, #32
 8002490:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a8:	461a      	mov	r2, r3
 80024aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	3301      	adds	r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d199      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f005 fcd2 	bl	8007e70 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024d6:	f040 80c0 	bne.w	800265a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f005 fcf3 	bl	8007eca <USB_ReadDevAllInEpInterrupt>
 80024e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024ea:	e0b2      	b.n	8002652 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80a7 	beq.w	8002646 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f005 fd19 	bl	8007f3a <USB_ReadDevInEPInterrupt>
 8002508:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d057      	beq.n	80025c4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	2201      	movs	r2, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	69f9      	ldr	r1, [r7, #28]
 8002530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002534:	4013      	ands	r3, r2
 8002536:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002544:	461a      	mov	r2, r3
 8002546:	2301      	movs	r3, #1
 8002548:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d132      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3348      	adds	r3, #72	; 0x48
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4403      	add	r3, r0
 8002572:	3344      	adds	r3, #68	; 0x44
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4419      	add	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4403      	add	r3, r0
 8002586:	3348      	adds	r3, #72	; 0x48
 8002588:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	2b00      	cmp	r3, #0
 800258e:	d113      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x31c>
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	3350      	adds	r3, #80	; 0x50
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025b0:	461a      	mov	r2, r3
 80025b2:	2101      	movs	r1, #1
 80025b4:	f005 fd22 	bl	8007ffc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4619      	mov	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f007 fa4f 	bl	8009a62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025da:	461a      	mov	r2, r3
 80025dc:	2308      	movs	r3, #8
 80025de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f6:	461a      	mov	r2, r3
 80025f8:	2310      	movs	r3, #16
 80025fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002612:	461a      	mov	r2, r3
 8002614:	2340      	movs	r3, #64	; 0x40
 8002616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262e:	461a      	mov	r2, r3
 8002630:	2302      	movs	r3, #2
 8002632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800263e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fc30 	bl	8002ea6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3301      	adds	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f af49 	bne.w	80024ec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f005 fc06 	bl	8007e70 <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800266a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800266e:	d122      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002696:	2100      	movs	r1, #0
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fe5f 	bl	800335c <HAL_PCDEx_LPM_Callback>
 800269e:	e002      	b.n	80026a6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f007 fa55 	bl	8009b50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f005 fbd8 	bl	8007e70 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ca:	d112      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f007 fa11 	bl	8009b04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f005 fbba 	bl	8007e70 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002706:	d121      	bne.n	800274c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002716:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d111      	bne.n	8002746 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800273c:	2101      	movs	r1, #1
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fe0c 	bl	800335c <HAL_PCDEx_LPM_Callback>
 8002744:	e002      	b.n	800274c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f007 f9dc 	bl	8009b04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f005 fb8d 	bl	8007e70 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	f040 80c7 	bne.w	80028f2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2110      	movs	r1, #16
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fc16 	bl	8006fb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002788:	e056      	b.n	8002838 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002796:	461a      	mov	r2, r3
 8002798:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800279c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ae:	0151      	lsls	r1, r2, #5
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	440a      	add	r2, r1
 80027b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027bc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ce:	0151      	lsls	r1, r2, #5
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	440a      	add	r2, r1
 80027d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ea:	461a      	mov	r2, r3
 80027ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002802:	0151      	lsls	r1, r2, #5
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	440a      	add	r2, r1
 8002808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800280c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002810:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	0151      	lsls	r1, r2, #5
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	440a      	add	r2, r1
 8002828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800282c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002830:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	3301      	adds	r3, #1
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283e:	429a      	cmp	r2, r3
 8002840:	d3a3      	bcc.n	800278a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002850:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002854:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286e:	f043 030b 	orr.w	r3, r3, #11
 8002872:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002884:	f043 030b 	orr.w	r3, r3, #11
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	e015      	b.n	80028b8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289a:	4619      	mov	r1, r3
 800289c:	f242 032b 	movw	r3, #8235	; 0x202b
 80028a0:	4313      	orrs	r3, r2
 80028a2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b2:	f043 030b 	orr.w	r3, r3, #11
 80028b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028dc:	461a      	mov	r2, r3
 80028de:	f005 fb8d 	bl	8007ffc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f005 faba 	bl	8007e70 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	d124      	bne.n	8002952 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f005 fb51 	bl	8007fb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fbab 	bl	8007072 <USB_GetDevSpeed>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681c      	ldr	r4, [r3, #0]
 8002928:	f001 fbf2 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 800292c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	4620      	mov	r0, r4
 8002938:	f004 f8ee 	bl	8006b18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f007 f8b8 	bl	8009ab2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002950:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f005 fa8a 	bl	8007e70 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d10a      	bne.n	800297c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f007 f895 	bl	8009a96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f002 0208 	and.w	r2, r2, #8
 800297a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f005 fa75 	bl	8007e70 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002990:	d10f      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f007 f8f7 	bl	8009b90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f005 fa5a 	bl	8007e70 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c6:	d10f      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f007 f8ca 	bl	8009b6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f005 fa3f 	bl	8007e70 <USB_ReadInterrupts>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d10a      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f007 f8d8 	bl	8009bb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f005 fa29 	bl	8007e70 <USB_ReadInterrupts>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d115      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f007 f8c8 	bl	8009bd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	e000      	b.n	8002a54 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002a52:	bf00      	nop
    }
  }
}
 8002a54:	3734      	adds	r7, #52	; 0x34
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}

08002a5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_PCD_SetAddress+0x1a>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e013      	b.n	8002a9c <HAL_PCD_SetAddress+0x42>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f005 f987 	bl	8007da0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	70fb      	strb	r3, [r7, #3]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	803b      	strh	r3, [r7, #0]
 8002aba:	4613      	mov	r3, r2
 8002abc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da0f      	bge.n	8002aea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 020f 	and.w	r2, r3, #15
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	3338      	adds	r3, #56	; 0x38
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	705a      	strb	r2, [r3, #1]
 8002ae8:	e00f      	b.n	8002b0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 020f 	and.w	r2, r3, #15
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b16:	883a      	ldrh	r2, [r7, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	78ba      	ldrb	r2, [r7, #2]
 8002b20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b34:	78bb      	ldrb	r3, [r7, #2]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d102      	bne.n	8002b40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_PCD_EP_Open+0xaa>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e00e      	b.n	8002b6c <HAL_PCD_EP_Open+0xc8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 faad 	bl	80070bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da0f      	bge.n	8002ba8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3338      	adds	r3, #56	; 0x38
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	705a      	strb	r2, [r3, #1]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_PCD_EP_Close+0x6e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e00e      	b.n	8002c00 <HAL_PCD_EP_Close+0x8c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 faeb 	bl	80071cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	460b      	mov	r3, r1
 8002c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	f003 020f 	and.w	r2, r3, #15
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2200      	movs	r2, #0
 8002c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c64:	7afb      	ldrb	r3, [r7, #11]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	f004 fdce 	bl	800781c <USB_EP0StartXfer>
 8002c80:	e008      	b.n	8002c94 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6979      	ldr	r1, [r7, #20]
 8002c90:	f004 fb78 	bl	8007384 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	460b      	mov	r3, r1
 8002cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3338      	adds	r3, #56	; 0x38
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	f004 fd84 	bl	800781c <USB_EP0StartXfer>
 8002d14:	e008      	b.n	8002d28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	6979      	ldr	r1, [r7, #20]
 8002d24:	f004 fb2e 	bl	8007384 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d901      	bls.n	8002d50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e050      	b.n	8002df2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da0f      	bge.n	8002d78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3338      	adds	r3, #56	; 0x38
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	705a      	strb	r2, [r3, #1]
 8002d76:	e00d      	b.n	8002d94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_PCD_EP_SetStall+0x82>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e01e      	b.n	8002df2 <HAL_PCD_EP_SetStall+0xc0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 ff18 	bl	8007bf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	b2d9      	uxtb	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002de2:	461a      	mov	r2, r3
 8002de4:	f005 f90a 	bl	8007ffc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 020f 	and.w	r2, r3, #15
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d901      	bls.n	8002e18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e042      	b.n	8002e9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da0f      	bge.n	8002e40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 020f 	and.w	r2, r3, #15
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	3338      	adds	r3, #56	; 0x38
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	3304      	adds	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	705a      	strb	r2, [r3, #1]
 8002e3e:	e00f      	b.n	8002e60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_PCD_EP_ClrStall+0x86>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e00e      	b.n	8002e9e <HAL_PCD_EP_ClrStall+0xa4>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 ff20 	bl	8007cd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b08a      	sub	sp, #40	; 0x28
 8002eaa:	af02      	add	r7, sp, #8
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	3338      	adds	r3, #56	; 0x38
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d901      	bls.n	8002ede <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e06c      	b.n	8002fb8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d902      	bls.n	8002efa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3303      	adds	r3, #3
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f02:	e02b      	b.n	8002f5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d902      	bls.n	8002f20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3303      	adds	r3, #3
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f004 fdc4 	bl	8007acc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	441a      	add	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d809      	bhi.n	8002f86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d203      	bcs.n	8002f86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1be      	bne.n	8002f04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d811      	bhi.n	8002fb6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	2201      	movs	r2, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	6939      	ldr	r1, [r7, #16]
 8002fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	333c      	adds	r3, #60	; 0x3c
 8002fd8:	3304      	adds	r3, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	f040 80a0 	bne.w	8003138 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d015      	beq.n	800302e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a72      	ldr	r2, [pc, #456]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003006:	4293      	cmp	r3, r2
 8003008:	f240 80dd 	bls.w	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80d7 	beq.w	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	e0cb      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003044:	461a      	mov	r2, r3
 8003046:	2320      	movs	r3, #32
 8003048:	6093      	str	r3, [r2, #8]
 800304a:	e0bc      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 80b7 	bne.w	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d90f      	bls.n	8003080 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	461a      	mov	r2, r3
 8003078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307c:	6093      	str	r3, [r2, #8]
 800307e:	e0a2      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003092:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	0159      	lsls	r1, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	440b      	add	r3, r1
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4403      	add	r3, r0
 80030b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4403      	add	r3, r0
 80030de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4419      	add	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4403      	add	r3, r0
 80030f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d114      	bne.n	800312a <PCD_EP_OutXfrComplete_int+0x16a>
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003122:	461a      	mov	r2, r3
 8003124:	2101      	movs	r1, #1
 8003126:	f004 ff69 	bl	8007ffc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	4619      	mov	r1, r3
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f006 fc7b 	bl	8009a2c <HAL_PCD_DataOutStageCallback>
 8003136:	e046      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d124      	bne.n	800318a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	461a      	mov	r2, r3
 8003158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315c:	6093      	str	r3, [r2, #8]
 800315e:	e032      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003176:	461a      	mov	r2, r3
 8003178:	2320      	movs	r3, #32
 800317a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f006 fc52 	bl	8009a2c <HAL_PCD_DataOutStageCallback>
 8003188:	e01d      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d114      	bne.n	80031ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d108      	bne.n	80031ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031b2:	461a      	mov	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	f004 ff21 	bl	8007ffc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f006 fc33 	bl	8009a2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	4f54300a 	.word	0x4f54300a
 80031d4:	4f54310a 	.word	0x4f54310a

080031d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	333c      	adds	r3, #60	; 0x3c
 80031f0:	3304      	adds	r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d90e      	bls.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f006 fbeb 	bl	8009a08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d90c      	bls.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800324c:	461a      	mov	r2, r3
 800324e:	2101      	movs	r1, #1
 8003250:	f004 fed4 	bl	8007ffc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	4f54300a 	.word	0x4f54300a

08003264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	4613      	mov	r3, r2
 8003272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003282:	883b      	ldrh	r3, [r7, #0]
 8003284:	0419      	lsls	r1, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	430a      	orrs	r2, r1
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
 8003290:	e028      	b.n	80032e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e00d      	b.n	80032c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3340      	adds	r3, #64	; 0x40
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3ec      	bcc.n	80032a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032cc:	883b      	ldrh	r3, [r7, #0]
 80032ce:	0418      	lsls	r0, r3, #16
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4302      	orrs	r2, r0
 80032dc:	3340      	adds	r3, #64	; 0x40
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_PCDEx_ActivateLPM+0x44>)
 8003344:	4313      	orrs	r3, r2
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	10000003 	.word	0x10000003

0800335c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800337e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	58024800 	.word	0x58024800

08003394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e37a      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8087 	beq.w	80034c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b4:	4ba0      	ldr	r3, [pc, #640]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033be:	4b9e      	ldr	r3, [pc, #632]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d007      	beq.n	80033da <HAL_RCC_OscConfig+0x46>
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	2b18      	cmp	r3, #24
 80033ce:	d110      	bne.n	80033f2 <HAL_RCC_OscConfig+0x5e>
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d10b      	bne.n	80033f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033da:	4b97      	ldr	r3, [pc, #604]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d06c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x12c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d168      	bne.n	80034c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e354      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x76>
 80033fc:	4b8e      	ldr	r3, [pc, #568]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a8d      	ldr	r2, [pc, #564]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	e02e      	b.n	8003468 <HAL_RCC_OscConfig+0xd4>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x98>
 8003412:	4b89      	ldr	r3, [pc, #548]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a88      	ldr	r2, [pc, #544]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b86      	ldr	r3, [pc, #536]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a85      	ldr	r2, [pc, #532]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01d      	b.n	8003468 <HAL_RCC_OscConfig+0xd4>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0xbc>
 8003436:	4b80      	ldr	r3, [pc, #512]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7f      	ldr	r2, [pc, #508]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0xd4>
 8003450:	4b79      	ldr	r3, [pc, #484]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a78      	ldr	r2, [pc, #480]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a75      	ldr	r2, [pc, #468]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd fd6a 	bl	8000f48 <HAL_GetTick>
 8003474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7fd fd66 	bl	8000f48 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e308      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800348a:	4b6b      	ldr	r3, [pc, #428]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0xe4>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fd56 	bl	8000f48 <HAL_GetTick>
 800349c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fd fd52 	bl	8000f48 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e2f4      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034b2:	4b61      	ldr	r3, [pc, #388]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x10c>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d06d      	beq.n	80035aa <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ce:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034d8:	4b57      	ldr	r3, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_RCC_OscConfig+0x160>
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2b18      	cmp	r3, #24
 80034e8:	d11b      	bne.n	8003522 <HAL_RCC_OscConfig+0x18e>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d116      	bne.n	8003522 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_OscConfig+0x178>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e2c7      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b4a      	ldr	r3, [pc, #296]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	061b      	lsls	r3, r3, #24
 800351a:	4947      	ldr	r1, [pc, #284]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003520:	e043      	b.n	80035aa <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d026      	beq.n	8003578 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800352a:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0219 	bic.w	r2, r3, #25
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4940      	ldr	r1, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fd04 	bl	8000f48 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003544:	f7fd fd00 	bl	8000f48 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e2a2      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003556:	4b38      	ldr	r3, [pc, #224]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b35      	ldr	r3, [pc, #212]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	061b      	lsls	r3, r3, #24
 8003570:	4931      	ldr	r1, [pc, #196]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
 8003576:	e018      	b.n	80035aa <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003578:	4b2f      	ldr	r3, [pc, #188]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2e      	ldr	r2, [pc, #184]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fd fce0 	bl	8000f48 <HAL_GetTick>
 8003588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358c:	f7fd fcdc 	bl	8000f48 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e27e      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d06c      	beq.n	8003690 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b6:	4b20      	ldr	r3, [pc, #128]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d007      	beq.n	80035dc <HAL_RCC_OscConfig+0x248>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b18      	cmp	r3, #24
 80035d0:	d11b      	bne.n	800360a <HAL_RCC_OscConfig+0x276>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d116      	bne.n	800360a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_OscConfig+0x260>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e253      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035f4:	4b10      	ldr	r3, [pc, #64]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	490d      	ldr	r1, [pc, #52]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003608:	e042      	b.n	8003690 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d025      	beq.n	800365e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <HAL_RCC_OscConfig+0x2a4>)
 8003618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fd fc93 	bl	8000f48 <HAL_GetTick>
 8003622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003626:	f7fd fc8f 	bl	8000f48 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d903      	bls.n	800363c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e231      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
 8003638:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800363c:	4ba3      	ldr	r3, [pc, #652]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ee      	beq.n	8003626 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003648:	4ba0      	ldr	r3, [pc, #640]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	499d      	ldr	r1, [pc, #628]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003658:	4313      	orrs	r3, r2
 800365a:	60cb      	str	r3, [r1, #12]
 800365c:	e018      	b.n	8003690 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800365e:	4b9b      	ldr	r3, [pc, #620]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a9a      	ldr	r2, [pc, #616]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fd fc6d 	bl	8000f48 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003672:	f7fd fc69 	bl	8000f48 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e20b      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003684:	4b91      	ldr	r3, [pc, #580]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d036      	beq.n	800370a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d019      	beq.n	80036d8 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a4:	4b89      	ldr	r3, [pc, #548]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	4a88      	ldr	r2, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd fc4a 	bl	8000f48 <HAL_GetTick>
 80036b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fd fc46 	bl	8000f48 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1e8      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036ca:	4b80      	ldr	r3, [pc, #512]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x324>
 80036d6:	e018      	b.n	800370a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d8:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	4a7b      	ldr	r2, [pc, #492]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fd fc30 	bl	8000f48 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fd fc2c 	bl	8000f48 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1ce      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036fe:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d019      	beq.n	8003752 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800371e:	4b6b      	ldr	r3, [pc, #428]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6a      	ldr	r2, [pc, #424]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003728:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800372a:	f7fd fc0d 	bl	8000f48 <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003732:	f7fd fc09 	bl	8000f48 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1ab      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003744:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x39e>
 8003750:	e018      	b.n	8003784 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003752:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a5d      	ldr	r2, [pc, #372]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800375e:	f7fd fbf3 	bl	8000f48 <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003766:	f7fd fbef 	bl	8000f48 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e191      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003778:	4b54      	ldr	r3, [pc, #336]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8081 	beq.w	8003894 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003792:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCC_OscConfig+0x53c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a4e      	ldr	r2, [pc, #312]	; (80038d0 <HAL_RCC_OscConfig+0x53c>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800379e:	f7fd fbd3 	bl	8000f48 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037a6:	f7fd fbcf 	bl	8000f48 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b64      	cmp	r3, #100	; 0x64
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e171      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037b8:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <HAL_RCC_OscConfig+0x53c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x446>
 80037cc:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a3e      	ldr	r2, [pc, #248]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	e02d      	b.n	8003836 <HAL_RCC_OscConfig+0x4a2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x468>
 80037e2:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a39      	ldr	r2, [pc, #228]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a36      	ldr	r2, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	e01c      	b.n	8003836 <HAL_RCC_OscConfig+0x4a2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b05      	cmp	r3, #5
 8003802:	d10c      	bne.n	800381e <HAL_RCC_OscConfig+0x48a>
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	e00b      	b.n	8003836 <HAL_RCC_OscConfig+0x4a2>
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a27      	ldr	r2, [pc, #156]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d015      	beq.n	800386a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd fb83 	bl	8000f48 <HAL_GetTick>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd fb7f 	bl	8000f48 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e11f      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ee      	beq.n	8003846 <HAL_RCC_OscConfig+0x4b2>
 8003868:	e014      	b.n	8003894 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd fb6d 	bl	8000f48 <HAL_GetTick>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd fb69 	bl	8000f48 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e109      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ee      	bne.n	8003872 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80fe 	beq.w	8003a9a <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038a6:	2b18      	cmp	r3, #24
 80038a8:	f000 80b9 	beq.w	8003a1e <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	f040 809a 	bne.w	80039ea <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <HAL_RCC_OscConfig+0x538>)
 80038bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd fb41 	bl	8000f48 <HAL_GetTick>
 80038c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038c8:	e00d      	b.n	80038e6 <HAL_RCC_OscConfig+0x552>
 80038ca:	bf00      	nop
 80038cc:	58024400 	.word	0x58024400
 80038d0:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd fb38 	bl	8000f48 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0da      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038e6:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f2:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80038f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f6:	4b6c      	ldr	r3, [pc, #432]	; (8003aa8 <HAL_RCC_OscConfig+0x714>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	430a      	orrs	r2, r1
 8003906:	4967      	ldr	r1, [pc, #412]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003908:	4313      	orrs	r3, r2
 800390a:	628b      	str	r3, [r1, #40]	; 0x28
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	3b01      	subs	r3, #1
 8003912:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	3b01      	subs	r3, #1
 800391c:	025b      	lsls	r3, r3, #9
 800391e:	b29b      	uxth	r3, r3
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	3b01      	subs	r3, #1
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800393c:	4959      	ldr	r1, [pc, #356]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003942:	4b58      	ldr	r3, [pc, #352]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	4a57      	ldr	r2, [pc, #348]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800394e:	4b55      	ldr	r3, [pc, #340]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003952:	4b56      	ldr	r3, [pc, #344]	; (8003aac <HAL_RCC_OscConfig+0x718>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800395a:	00d2      	lsls	r2, r2, #3
 800395c:	4951      	ldr	r1, [pc, #324]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 800395e:	4313      	orrs	r3, r2
 8003960:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003962:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f023 020c 	bic.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003970:	4313      	orrs	r3, r2
 8003972:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f023 0202 	bic.w	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	4948      	ldr	r1, [pc, #288]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003982:	4313      	orrs	r3, r2
 8003984:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	4a46      	ldr	r2, [pc, #280]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80039aa:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4a3d      	ldr	r2, [pc, #244]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fd fac1 	bl	8000f48 <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fd fabd 	bl	8000f48 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e05f      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x636>
 80039e8:	e057      	b.n	8003a9a <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 80039f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd faa7 	bl	8000f48 <HAL_GetTick>
 80039fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fd faa3 	bl	8000f48 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e045      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x66a>
 8003a1c:	e03d      	b.n	8003a9a <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a24:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <HAL_RCC_OscConfig+0x710>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d031      	beq.n	8003a96 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0203 	and.w	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d12a      	bne.n	8003a96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d122      	bne.n	8003a96 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d11a      	bne.n	8003a96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	0a5b      	lsrs	r3, r3, #9
 8003a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d111      	bne.n	8003a96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d108      	bne.n	8003a96 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	0e1b      	lsrs	r3, r3, #24
 8003a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3730      	adds	r7, #48	; 0x30
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	fffffc0c 	.word	0xfffffc0c
 8003aac:	ffff0007 	.word	0xffff0007

08003ab0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e19c      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b8a      	ldr	r3, [pc, #552]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d910      	bls.n	8003af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b87      	ldr	r3, [pc, #540]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 020f 	bic.w	r2, r3, #15
 8003ada:	4985      	ldr	r1, [pc, #532]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b83      	ldr	r3, [pc, #524]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e184      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d908      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b10:	4b78      	ldr	r3, [pc, #480]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4975      	ldr	r1, [pc, #468]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d908      	bls.n	8003b50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	496a      	ldr	r1, [pc, #424]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d010      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	4b64      	ldr	r3, [pc, #400]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d908      	bls.n	8003b7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b6c:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	495e      	ldr	r1, [pc, #376]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d908      	bls.n	8003bac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b9a:	4b56      	ldr	r3, [pc, #344]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4953      	ldr	r1, [pc, #332]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	4b4d      	ldr	r3, [pc, #308]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d908      	bls.n	8003bda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f023 020f 	bic.w	r2, r3, #15
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4947      	ldr	r1, [pc, #284]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d055      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003be6:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4940      	ldr	r1, [pc, #256]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c00:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d121      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0f6      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d115      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0ea      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c30:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0de      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0d6      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f023 0207 	bic.w	r2, r3, #7
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4925      	ldr	r1, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fd f971 	bl	8000f48 <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6a:	f7fd f96d 	bl	8000f48 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0be      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d1eb      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d208      	bcs.n	8003cc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f023 020f 	bic.w	r2, r3, #15
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	490e      	ldr	r1, [pc, #56]	; (8003cf4 <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d214      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 020f 	bic.w	r2, r3, #15
 8003cd6:	4906      	ldr	r1, [pc, #24]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_RCC_ClockConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e086      	b.n	8003dfe <HAL_RCC_ClockConfig+0x34e>
 8003cf0:	52002000 	.word	0x52002000
 8003cf4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	4b3f      	ldr	r3, [pc, #252]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d208      	bcs.n	8003d26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d14:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	4939      	ldr	r1, [pc, #228]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d208      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	492e      	ldr	r1, [pc, #184]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d010      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d208      	bcs.n	8003d82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	4922      	ldr	r1, [pc, #136]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d010      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d208      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d9e:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4917      	ldr	r1, [pc, #92]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003db0:	f000 f834 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	4912      	ldr	r1, [pc, #72]	; (8003e0c <HAL_RCC_ClockConfig+0x35c>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_RCC_ClockConfig+0x358>)
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <HAL_RCC_ClockConfig+0x35c>)
 8003dd8:	5cd3      	ldrb	r3, [r2, r3]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <HAL_RCC_ClockConfig+0x360>)
 8003de6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003de8:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <HAL_RCC_ClockConfig+0x364>)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_RCC_ClockConfig+0x368>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd f85e 	bl	8000eb4 <HAL_InitTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	0800a030 	.word	0x0800a030
 8003e10:	24000004 	.word	0x24000004
 8003e14:	24000000 	.word	0x24000000
 8003e18:	24000008 	.word	0x24000008

08003e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e22:	4bb3      	ldr	r3, [pc, #716]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e2a:	2b18      	cmp	r3, #24
 8003e2c:	f200 8155 	bhi.w	80040da <HAL_RCC_GetSysClockFreq+0x2be>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e9d 	.word	0x08003e9d
 8003e3c:	080040db 	.word	0x080040db
 8003e40:	080040db 	.word	0x080040db
 8003e44:	080040db 	.word	0x080040db
 8003e48:	080040db 	.word	0x080040db
 8003e4c:	080040db 	.word	0x080040db
 8003e50:	080040db 	.word	0x080040db
 8003e54:	080040db 	.word	0x080040db
 8003e58:	08003ec3 	.word	0x08003ec3
 8003e5c:	080040db 	.word	0x080040db
 8003e60:	080040db 	.word	0x080040db
 8003e64:	080040db 	.word	0x080040db
 8003e68:	080040db 	.word	0x080040db
 8003e6c:	080040db 	.word	0x080040db
 8003e70:	080040db 	.word	0x080040db
 8003e74:	080040db 	.word	0x080040db
 8003e78:	08003ec9 	.word	0x08003ec9
 8003e7c:	080040db 	.word	0x080040db
 8003e80:	080040db 	.word	0x080040db
 8003e84:	080040db 	.word	0x080040db
 8003e88:	080040db 	.word	0x080040db
 8003e8c:	080040db 	.word	0x080040db
 8003e90:	080040db 	.word	0x080040db
 8003e94:	080040db 	.word	0x080040db
 8003e98:	08003ecf 	.word	0x08003ecf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e9c:	4b94      	ldr	r3, [pc, #592]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ea8:	4b91      	ldr	r3, [pc, #580]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	08db      	lsrs	r3, r3, #3
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	4a90      	ldr	r2, [pc, #576]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003eba:	e111      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ebc:	4b8d      	ldr	r3, [pc, #564]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ebe:	61bb      	str	r3, [r7, #24]
    break;
 8003ec0:	e10e      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003ec2:	4b8d      	ldr	r3, [pc, #564]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ec4:	61bb      	str	r3, [r7, #24]
    break;
 8003ec6:	e10b      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003ec8:	4b8c      	ldr	r3, [pc, #560]	; (80040fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003eca:	61bb      	str	r3, [r7, #24]
    break;
 8003ecc:	e108      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ece:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003ed8:	4b85      	ldr	r3, [pc, #532]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ee2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ee4:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003eee:	4b80      	ldr	r3, [pc, #512]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	08db      	lsrs	r3, r3, #3
 8003ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80e1 	beq.w	80040d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	f000 8083 	beq.w	8004020 <HAL_RCC_GetSysClockFreq+0x204>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	f200 80a1 	bhi.w	8004064 <HAL_RCC_GetSysClockFreq+0x248>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x114>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d056      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f2e:	e099      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f30:	4b6f      	ldr	r3, [pc, #444]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02d      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f3c:	4b6c      	ldr	r3, [pc, #432]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	08db      	lsrs	r3, r3, #3
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	4a6b      	ldr	r2, [pc, #428]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b62      	ldr	r3, [pc, #392]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004100 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003f96:	e087      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004104 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004100 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fda:	e065      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004108 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004002:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004100 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401e:	e043      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800410c <HAL_RCC_GetSysClockFreq+0x2f0>
 800402e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004042:	ed97 6a02 	vldr	s12, [r7, #8]
 8004046:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004100 <HAL_RCC_GetSysClockFreq+0x2e4>
 800404a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004062:	e021      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004108 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004076:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	ed97 6a02 	vldr	s12, [r7, #8]
 800408a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004100 <HAL_RCC_GetSysClockFreq+0x2e4>
 800408e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	0a5b      	lsrs	r3, r3, #9
 80040ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b2:	3301      	adds	r3, #1
 80040b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80040c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040cc:	ee17 3a90 	vmov	r3, s15
 80040d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80040d2:	e005      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
    break;
 80040d8:	e002      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040dc:	61bb      	str	r3, [r7, #24]
    break;
 80040de:	bf00      	nop
  }

  return sysclockfreq;
 80040e0:	69bb      	ldr	r3, [r7, #24]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3724      	adds	r7, #36	; 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
 80040f4:	03d09000 	.word	0x03d09000
 80040f8:	003d0900 	.word	0x003d0900
 80040fc:	017d7840 	.word	0x017d7840
 8004100:	46000000 	.word	0x46000000
 8004104:	4c742400 	.word	0x4c742400
 8004108:	4a742400 	.word	0x4a742400
 800410c:	4bbebc20 	.word	0x4bbebc20

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004116:	f7ff fe81 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 800411a:	4602      	mov	r2, r0
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_RCC_GetHCLKFreq+0x50>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	490f      	ldr	r1, [pc, #60]	; (8004164 <HAL_RCC_GetHCLKFreq+0x54>)
 8004128:	5ccb      	ldrb	r3, [r1, r3]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_RCC_GetHCLKFreq+0x50>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	4a09      	ldr	r2, [pc, #36]	; (8004164 <HAL_RCC_GetHCLKFreq+0x54>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a07      	ldr	r2, [pc, #28]	; (8004168 <HAL_RCC_GetHCLKFreq+0x58>)
 800414c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800414e:	4a07      	ldr	r2, [pc, #28]	; (800416c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <HAL_RCC_GetHCLKFreq+0x58>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	58024400 	.word	0x58024400
 8004164:	0800a030 	.word	0x0800a030
 8004168:	24000004 	.word	0x24000004
 800416c:	24000000 	.word	0x24000000

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004174:	f7ff ffcc 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	58024400 	.word	0x58024400
 8004198:	0800a030 	.word	0x0800a030

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041a0:	f7ff ffb6 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	58024400 	.word	0x58024400
 80041c4:	0800a030 	.word	0x0800a030

080041c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041d0:	2300      	movs	r3, #0
 80041d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041d4:	2300      	movs	r3, #0
 80041d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d03f      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041ec:	d02a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041f2:	d824      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041f8:	d018      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041fe:	d81e      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004208:	d007      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800420a:	e018      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420c:	4bab      	ldr	r3, [pc, #684]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4aaa      	ldr	r2, [pc, #680]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004218:	e015      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f989 	bl	8005538 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800422a:	e00c      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3324      	adds	r3, #36	; 0x24
 8004230:	2102      	movs	r1, #2
 8004232:	4618      	mov	r0, r3
 8004234:	f001 fa32 	bl	800569c <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
      break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800424c:	4b9b      	ldr	r3, [pc, #620]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004258:	4998      	ldr	r1, [pc, #608]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	650b      	str	r3, [r1, #80]	; 0x50
 800425e:	e001      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d03d      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2b04      	cmp	r3, #4
 8004276:	d826      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004295 	.word	0x08004295
 8004284:	080042a3 	.word	0x080042a3
 8004288:	080042b5 	.word	0x080042b5
 800428c:	080042cd 	.word	0x080042cd
 8004290:	080042cd 	.word	0x080042cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004294:	4b89      	ldr	r3, [pc, #548]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4a88      	ldr	r2, [pc, #544]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042a0:	e015      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f945 	bl	8005538 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042b2:	e00c      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f9ee 	bl	800569c <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d4:	4b79      	ldr	r3, [pc, #484]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	f023 0207 	bic.w	r2, r3, #7
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	4976      	ldr	r1, [pc, #472]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	650b      	str	r3, [r1, #80]	; 0x50
 80042e6:	e001      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d051      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042fe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004302:	d036      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004304:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004308:	d830      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800430a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800430e:	d032      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004314:	d82a      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004316:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800431a:	d02e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800431c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004320:	d824      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004326:	d018      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432c:	d81e      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004336:	d007      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004338:	e018      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433a:	4b60      	ldr	r3, [pc, #384]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a5f      	ldr	r2, [pc, #380]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004344:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004346:	e019      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f8f2 	bl	8005538 <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004358:	e010      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3324      	adds	r3, #36	; 0x24
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f001 f99b 	bl	800569c <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800436a:	e007      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	e004      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004372:	bf00      	nop
 8004374:	e002      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800437a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004382:	4b4e      	ldr	r3, [pc, #312]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004386:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004390:	494a      	ldr	r1, [pc, #296]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	658b      	str	r3, [r1, #88]	; 0x58
 8004396:	e001      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d051      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80043b2:	d036      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80043b4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80043b8:	d830      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80043ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043be:	d032      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80043c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c4:	d82a      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80043c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043ca:	d02e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80043cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043d0:	d824      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80043d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d6:	d018      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x242>
 80043d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043dc:	d81e      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x222>
 80043e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e6:	d007      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80043e8:	e018      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ea:	4b34      	ldr	r3, [pc, #208]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4a33      	ldr	r2, [pc, #204]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043f6:	e019      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f89a 	bl	8005538 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004408:	e010      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3324      	adds	r3, #36	; 0x24
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f001 f943 	bl	800569c <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800441a:	e007      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
      break;
 8004420:	e004      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800442a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004432:	4b22      	ldr	r3, [pc, #136]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004440:	491e      	ldr	r1, [pc, #120]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	658b      	str	r3, [r1, #88]	; 0x58
 8004446:	e001      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d035      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d01c      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004460:	2b30      	cmp	r3, #48	; 0x30
 8004462:	d817      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004464:	2b20      	cmp	r3, #32
 8004466:	d00c      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d813      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d10f      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	4a10      	ldr	r2, [pc, #64]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800447a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004480:	e00e      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f001 f855 	bl	8005538 <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004492:	e005      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	e002      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800449e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	4902      	ldr	r1, [pc, #8]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044b8:	e004      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80044ba:	bf00      	nop
 80044bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d047      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d8:	d030      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80044da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044de:	d82a      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80044e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044e4:	d02c      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80044e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ea:	d824      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80044ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f0:	d018      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f6:	d81e      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d007      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004502:	e018      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004504:	4bac      	ldr	r3, [pc, #688]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	4aab      	ldr	r2, [pc, #684]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800450a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004510:	e017      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f001 f80d 	bl	8005538 <RCCEx_PLL2_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004522:	e00e      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3324      	adds	r3, #36	; 0x24
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f8b6 	bl	800569c <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004534:	e005      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
      break;
 800453a:	e002      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004548:	4b9b      	ldr	r3, [pc, #620]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	4998      	ldr	r1, [pc, #608]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	650b      	str	r3, [r1, #80]	; 0x50
 800455a:	e001      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d049      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457a:	d828      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x406>
 800457c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004580:	d02a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004582:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004586:	d822      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004588:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800458c:	d026      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800458e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004592:	d81c      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004598:	d010      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800459a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800459e:	d816      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x406>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01d      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d111      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 ffc1 	bl	8005538 <RCCEx_PLL2_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80045ba:	e012      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3324      	adds	r3, #36	; 0x24
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 f86a 	bl	800569c <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80045cc:	e009      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
      break;
 80045d2:	e006      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80045d4:	bf00      	nop
 80045d6:	e004      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80045d8:	bf00      	nop
 80045da:	e002      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80045dc:	bf00      	nop
 80045de:	e000      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80045e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045e8:	4b73      	ldr	r3, [pc, #460]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	4970      	ldr	r1, [pc, #448]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	650b      	str	r3, [r1, #80]	; 0x50
 80045fa:	e001      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d04b      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004616:	d02e      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800461c:	d828      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d02a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d822      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800462a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800462e:	d026      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004630:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004634:	d81c      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463a:	d010      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800463c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004640:	d816      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01d      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800464a:	d111      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ff70 	bl	8005538 <RCCEx_PLL2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800465c:	e012      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3324      	adds	r3, #36	; 0x24
 8004662:	2101      	movs	r1, #1
 8004664:	4618      	mov	r0, r3
 8004666:	f001 f819 	bl	800569c <RCCEx_PLL3_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800466e:	e009      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
      break;
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004676:	bf00      	nop
 8004678:	e004      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800468a:	4b4b      	ldr	r3, [pc, #300]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004698:	4947      	ldr	r1, [pc, #284]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	658b      	str	r3, [r1, #88]	; 0x58
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b8:	d00e      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80046ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046be:	d814      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x522>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80046c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046c8:	d10f      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	4a3a      	ldr	r2, [pc, #232]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80046d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80046d6:	e00c      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	2101      	movs	r1, #1
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 ff2a 	bl	8005538 <RCCEx_PLL2_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
      break;
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80046f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046f8:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004704:	492c      	ldr	r1, [pc, #176]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004706:	4313      	orrs	r3, r2
 8004708:	650b      	str	r3, [r1, #80]	; 0x50
 800470a:	e001      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d032      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	2b03      	cmp	r3, #3
 8004722:	d81b      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004763 	.word	0x08004763
 8004730:	0800473d 	.word	0x0800473d
 8004734:	0800474b 	.word	0x0800474b
 8004738:	08004763 	.word	0x08004763
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004748:	e00c      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2102      	movs	r1, #2
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fef1 	bl	8005538 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800475a:	e003      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
      break;
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	4910      	ldr	r1, [pc, #64]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800477c:	e001      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 808a 	beq.w	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800479c:	f7fc fbd4 	bl	8000f48 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047a2:	e00d      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fc fbd0 	bl	8000f48 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	; 0x64
 80047b0:	d906      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	75fb      	strb	r3, [r7, #23]
        break;
 80047b6:	e009      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80047b8:	58024400 	.word	0x58024400
 80047bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c0:	4bb9      	ldr	r3, [pc, #740]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0eb      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d166      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047d2:	4bb6      	ldr	r3, [pc, #728]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047dc:	4053      	eors	r3, r2
 80047de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d013      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e6:	4bb1      	ldr	r3, [pc, #708]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047f0:	4bae      	ldr	r3, [pc, #696]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4aad      	ldr	r2, [pc, #692]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fc:	4bab      	ldr	r3, [pc, #684]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4aaa      	ldr	r2, [pc, #680]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004806:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004808:	4aa8      	ldr	r2, [pc, #672]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004818:	d115      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fc fb95 	bl	8000f48 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004820:	e00b      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fc fb91 	bl	8000f48 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d902      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	75fb      	strb	r3, [r7, #23]
            break;
 8004838:	e005      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800483a:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ed      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004846:	7dfb      	ldrb	r3, [r7, #23]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d126      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485a:	d10d      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800485c:	4b93      	ldr	r3, [pc, #588]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800486a:	0919      	lsrs	r1, r3, #4
 800486c:	4b90      	ldr	r3, [pc, #576]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800486e:	400b      	ands	r3, r1
 8004870:	498e      	ldr	r1, [pc, #568]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	610b      	str	r3, [r1, #16]
 8004876:	e005      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004878:	4b8c      	ldr	r3, [pc, #560]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	4a8b      	ldr	r2, [pc, #556]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800487e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004882:	6113      	str	r3, [r2, #16]
 8004884:	4b89      	ldr	r3, [pc, #548]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	4986      	ldr	r1, [pc, #536]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	670b      	str	r3, [r1, #112]	; 0x70
 8004898:	e004      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	75bb      	strb	r3, [r7, #22]
 800489e:	e001      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d07e      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b4:	2b28      	cmp	r3, #40	; 0x28
 80048b6:	d867      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	0800498f 	.word	0x0800498f
 80048c4:	08004989 	.word	0x08004989
 80048c8:	08004989 	.word	0x08004989
 80048cc:	08004989 	.word	0x08004989
 80048d0:	08004989 	.word	0x08004989
 80048d4:	08004989 	.word	0x08004989
 80048d8:	08004989 	.word	0x08004989
 80048dc:	08004989 	.word	0x08004989
 80048e0:	08004965 	.word	0x08004965
 80048e4:	08004989 	.word	0x08004989
 80048e8:	08004989 	.word	0x08004989
 80048ec:	08004989 	.word	0x08004989
 80048f0:	08004989 	.word	0x08004989
 80048f4:	08004989 	.word	0x08004989
 80048f8:	08004989 	.word	0x08004989
 80048fc:	08004989 	.word	0x08004989
 8004900:	08004977 	.word	0x08004977
 8004904:	08004989 	.word	0x08004989
 8004908:	08004989 	.word	0x08004989
 800490c:	08004989 	.word	0x08004989
 8004910:	08004989 	.word	0x08004989
 8004914:	08004989 	.word	0x08004989
 8004918:	08004989 	.word	0x08004989
 800491c:	08004989 	.word	0x08004989
 8004920:	0800498f 	.word	0x0800498f
 8004924:	08004989 	.word	0x08004989
 8004928:	08004989 	.word	0x08004989
 800492c:	08004989 	.word	0x08004989
 8004930:	08004989 	.word	0x08004989
 8004934:	08004989 	.word	0x08004989
 8004938:	08004989 	.word	0x08004989
 800493c:	08004989 	.word	0x08004989
 8004940:	0800498f 	.word	0x0800498f
 8004944:	08004989 	.word	0x08004989
 8004948:	08004989 	.word	0x08004989
 800494c:	08004989 	.word	0x08004989
 8004950:	08004989 	.word	0x08004989
 8004954:	08004989 	.word	0x08004989
 8004958:	08004989 	.word	0x08004989
 800495c:	08004989 	.word	0x08004989
 8004960:	0800498f 	.word	0x0800498f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fde4 	bl	8005538 <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004974:	e00c      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3324      	adds	r3, #36	; 0x24
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fe8d 	bl	800569c <RCCEx_PLL3_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004986:	e003      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	75fb      	strb	r3, [r7, #23]
      break;
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800498e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004996:	4b45      	ldr	r3, [pc, #276]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	4942      	ldr	r1, [pc, #264]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	654b      	str	r3, [r1, #84]	; 0x54
 80049a8:	e001      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d037      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d820      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	08004a0b 	.word	0x08004a0b
 80049cc:	080049e1 	.word	0x080049e1
 80049d0:	080049f3 	.word	0x080049f3
 80049d4:	08004a0b 	.word	0x08004a0b
 80049d8:	08004a0b 	.word	0x08004a0b
 80049dc:	08004a0b 	.word	0x08004a0b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fda6 	bl	8005538 <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80049f0:	e00c      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fe4f 	bl	800569c <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a02:	e003      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	e000      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f023 0207 	bic.w	r2, r3, #7
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4923      	ldr	r1, [pc, #140]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	654b      	str	r3, [r1, #84]	; 0x54
 8004a24:	e001      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d040      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	d821      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a8b 	.word	0x08004a8b
 8004a4c:	08004a61 	.word	0x08004a61
 8004a50:	08004a73 	.word	0x08004a73
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a8b 	.word	0x08004a8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fd66 	bl	8005538 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a70:	e00c      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3324      	adds	r3, #36	; 0x24
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fe0f 	bl	800569c <RCCEx_PLL3_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004a82:	e003      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d110      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	f023 0207 	bic.w	r2, r3, #7
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa0:	4902      	ldr	r1, [pc, #8]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	658b      	str	r3, [r1, #88]	; 0x58
 8004aa6:	e007      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004aa8:	58024800 	.word	0x58024800
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d04b      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ace:	d02e      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad4:	d828      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d02a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d822      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004ae2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ae6:	d026      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004ae8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aec:	d81c      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af2:	d010      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af8:	d816      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01d      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b02:	d111      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fd14 	bl	8005538 <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b14:	e012      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3324      	adds	r3, #36	; 0x24
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fdbd 	bl	800569c <RCCEx_PLL3_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b26:	e009      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2c:	e006      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e004      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b42:	4bb2      	ldr	r3, [pc, #712]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	49ae      	ldr	r1, [pc, #696]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	654b      	str	r3, [r1, #84]	; 0x54
 8004b56:	e001      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d04b      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b72:	d02e      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004b74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b78:	d828      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	d02a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d822      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b8a:	d026      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b90:	d81c      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b96:	d010      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9c:	d816      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01d      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d111      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fcc2 	bl	8005538 <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004bb8:	e012      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3324      	adds	r3, #36	; 0x24
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fd6b 	bl	800569c <RCCEx_PLL3_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004bca:	e009      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e004      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004be6:	4b89      	ldr	r3, [pc, #548]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf4:	4985      	ldr	r1, [pc, #532]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	658b      	str	r3, [r1, #88]	; 0x58
 8004bfa:	e001      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d04b      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c16:	d02e      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004c18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c1c:	d828      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d02a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c28:	d822      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c2e:	d026      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004c30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c34:	d81c      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c40:	d816      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01d      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fc70 	bl	8005538 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c5c:	e012      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3324      	adds	r3, #36	; 0x24
 8004c62:	2102      	movs	r1, #2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fd19 	bl	800569c <RCCEx_PLL3_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c6e:	e009      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	e006      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c76:	bf00      	nop
 8004c78:	e004      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c8a:	4b60      	ldr	r3, [pc, #384]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c98:	495c      	ldr	r1, [pc, #368]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c9e:	e001      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d018      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3324      	adds	r3, #36	; 0x24
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fceb 	bl	800569c <RCCEx_PLL3_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004cd0:	4b4e      	ldr	r3, [pc, #312]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cdc:	494b      	ldr	r1, [pc, #300]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	d10a      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3324      	adds	r3, #36	; 0x24
 8004cfe:	2102      	movs	r1, #2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fccb 	bl	800569c <RCCEx_PLL3_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d10:	4b3e      	ldr	r3, [pc, #248]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	493b      	ldr	r1, [pc, #236]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d034      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d3a:	d01d      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d40:	d817      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d009      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d4c:	e011      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3304      	adds	r3, #4
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fbef 	bl	8005538 <RCCEx_PLL2_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d5e:	e00c      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	2102      	movs	r1, #2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fc98 	bl	800569c <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d70:	e003      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      break;
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d80:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d8e:	491f      	ldr	r1, [pc, #124]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	658b      	str	r3, [r1, #88]	; 0x58
 8004d94:	e001      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004db0:	d01c      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004db6:	d816      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc2:	d007      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004dc4:	e00f      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004dd2:	e00c      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fc5e 	bl	800569c <RCCEx_PLL3_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10d      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e02:	4902      	ldr	r1, [pc, #8]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	654b      	str	r3, [r1, #84]	; 0x54
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
 8004e12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d029      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d007      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004e2e:	e00f      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e30:	4b61      	ldr	r3, [pc, #388]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	4a60      	ldr	r2, [pc, #384]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e3c:	e00b      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fb77 	bl	8005538 <RCCEx_PLL2_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      break;
 8004e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e5c:	4b56      	ldr	r3, [pc, #344]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e68:	4953      	ldr	r1, [pc, #332]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e6e:	e001      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3324      	adds	r3, #36	; 0x24
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fc08 	bl	800569c <RCCEx_PLL3_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d030      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eaa:	d017      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb0:	d811      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb6:	d013      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebc:	d80b      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec8:	4b3b      	ldr	r3, [pc, #236]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4a3a      	ldr	r2, [pc, #232]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004ed4:	e007      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eda:	e004      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004edc:	bf00      	nop
 8004ede:	e002      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d109      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eec:	4b32      	ldr	r3, [pc, #200]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef8:	492f      	ldr	r1, [pc, #188]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	654b      	str	r3, [r1, #84]	; 0x54
 8004efe:	e001      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f10:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1c:	4926      	ldr	r1, [pc, #152]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f2e:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3a:	491f      	ldr	r1, [pc, #124]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f56:	6113      	str	r3, [r2, #16]
 8004f58:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f62:	4915      	ldr	r1, [pc, #84]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	da08      	bge.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f70:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	490e      	ldr	r1, [pc, #56]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9c:	4906      	ldr	r1, [pc, #24]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004fa2:	7dbb      	ldrb	r3, [r7, #22]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400

08004fbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fc0:	f7ff f8a6 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	4904      	ldr	r1, [pc, #16]	; (8004fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	0800a030 	.word	0x0800a030

08004fe8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ff0:	4ba1      	ldr	r3, [pc, #644]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004ffa:	4b9f      	ldr	r3, [pc, #636]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	0b1b      	lsrs	r3, r3, #12
 8005000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005004:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005006:	4b9c      	ldr	r3, [pc, #624]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005012:	4b99      	ldr	r3, [pc, #612]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	08db      	lsrs	r3, r3, #3
 8005018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8111 	beq.w	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b02      	cmp	r3, #2
 800503a:	f000 8083 	beq.w	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	f200 80a1 	bhi.w	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d056      	beq.n	8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005052:	e099      	b.n	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005054:	4b88      	ldr	r3, [pc, #544]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02d      	beq.n	80050bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005060:	4b85      	ldr	r3, [pc, #532]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	08db      	lsrs	r3, r3, #3
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	4a84      	ldr	r2, [pc, #528]	; (800527c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
 8005070:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	ee07 3a90 	vmov	s15, r3
 8005078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508a:	4b7b      	ldr	r3, [pc, #492]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509a:	ed97 6a03 	vldr	s12, [r7, #12]
 800509e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050ba:	e087      	b.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ce:	4b6a      	ldr	r3, [pc, #424]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050de:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050fe:	e065      	b.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b59      	ldr	r3, [pc, #356]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a03 	vldr	s12, [r7, #12]
 8005126:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005142:	e043      	b.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b48      	ldr	r3, [pc, #288]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005186:	e021      	b.n	80051cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b37      	ldr	r3, [pc, #220]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051cc:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	0a5b      	lsrs	r3, r3, #9
 80051d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f2:	ee17 2a90 	vmov	r2, s15
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80051fa:	4b1f      	ldr	r3, [pc, #124]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	0c1b      	lsrs	r3, r3, #16
 8005200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005204:	ee07 3a90 	vmov	s15, r3
 8005208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005214:	edd7 6a07 	vldr	s13, [r7, #28]
 8005218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005220:	ee17 2a90 	vmov	r2, s15
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005228:	4b13      	ldr	r3, [pc, #76]	; (8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	0e1b      	lsrs	r3, r3, #24
 800522e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800523e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005242:	edd7 6a07 	vldr	s13, [r7, #28]
 8005246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524e:	ee17 2a90 	vmov	r2, s15
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005256:	e008      	b.n	800526a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	609a      	str	r2, [r3, #8]
}
 800526a:	bf00      	nop
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	58024400 	.word	0x58024400
 800527c:	03d09000 	.word	0x03d09000
 8005280:	46000000 	.word	0x46000000
 8005284:	4c742400 	.word	0x4c742400
 8005288:	4a742400 	.word	0x4a742400
 800528c:	4bbebc20 	.word	0x4bbebc20

08005290 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005290:	b480      	push	{r7}
 8005292:	b089      	sub	sp, #36	; 0x24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005298:	4ba1      	ldr	r3, [pc, #644]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052a2:	4b9f      	ldr	r3, [pc, #636]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	0d1b      	lsrs	r3, r3, #20
 80052a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ae:	4b9c      	ldr	r3, [pc, #624]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052ba:	4b99      	ldr	r3, [pc, #612]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	08db      	lsrs	r3, r3, #3
 80052c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8111 	beq.w	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	f000 8083 	beq.w	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	f200 80a1 	bhi.w	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d056      	beq.n	80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052fa:	e099      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052fc:	4b88      	ldr	r3, [pc, #544]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02d      	beq.n	8005364 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005308:	4b85      	ldr	r3, [pc, #532]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	4a84      	ldr	r2, [pc, #528]	; (8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005332:	4b7b      	ldr	r3, [pc, #492]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005342:	ed97 6a03 	vldr	s12, [r7, #12]
 8005346:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005362:	e087      	b.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800552c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a03 	vldr	s12, [r7, #12]
 800538a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053a6:	e065      	b.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b59      	ldr	r3, [pc, #356]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ea:	e043      	b.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b48      	ldr	r3, [pc, #288]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005412:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800542e:	e021      	b.n	8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005442:	4b37      	ldr	r3, [pc, #220]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a03 	vldr	s12, [r7, #12]
 8005456:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005472:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	0a5b      	lsrs	r3, r3, #9
 800547a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800548a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800548e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549a:	ee17 2a90 	vmov	r2, s15
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c8:	ee17 2a90 	vmov	r2, s15
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	0e1b      	lsrs	r3, r3, #24
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f6:	ee17 2a90 	vmov	r2, s15
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054fe:	e008      	b.n	8005512 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	609a      	str	r2, [r3, #8]
}
 8005512:	bf00      	nop
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	58024400 	.word	0x58024400
 8005524:	03d09000 	.word	0x03d09000
 8005528:	46000000 	.word	0x46000000
 800552c:	4c742400 	.word	0x4c742400
 8005530:	4a742400 	.word	0x4a742400
 8005534:	4bbebc20 	.word	0x4bbebc20

08005538 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005546:	4b53      	ldr	r3, [pc, #332]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b03      	cmp	r3, #3
 8005550:	d101      	bne.n	8005556 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e099      	b.n	800568a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005556:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a4e      	ldr	r2, [pc, #312]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800555c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005562:	f7fb fcf1 	bl	8000f48 <HAL_GetTick>
 8005566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005568:	e008      	b.n	800557c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800556a:	f7fb fced 	bl	8000f48 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e086      	b.n	800568a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800557c:	4b45      	ldr	r3, [pc, #276]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005588:	4b42      	ldr	r3, [pc, #264]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	031b      	lsls	r3, r3, #12
 8005596:	493f      	ldr	r1, [pc, #252]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005598:	4313      	orrs	r3, r2
 800559a:	628b      	str	r3, [r1, #40]	; 0x28
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	025b      	lsls	r3, r3, #9
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055cc:	4931      	ldr	r1, [pc, #196]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055d2:	4b30      	ldr	r3, [pc, #192]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	492d      	ldr	r1, [pc, #180]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055e4:	4b2b      	ldr	r3, [pc, #172]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f023 0220 	bic.w	r2, r3, #32
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	4928      	ldr	r1, [pc, #160]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	4a26      	ldr	r2, [pc, #152]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	f023 0310 	bic.w	r3, r3, #16
 8005600:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005606:	4b24      	ldr	r3, [pc, #144]	; (8005698 <RCCEx_PLL2_Config+0x160>)
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	69d2      	ldr	r2, [r2, #28]
 800560e:	00d2      	lsls	r2, r2, #3
 8005610:	4920      	ldr	r1, [pc, #128]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005616:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800561c:	f043 0310 	orr.w	r3, r3, #16
 8005620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005628:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800562e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005632:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005634:	e00f      	b.n	8005656 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d106      	bne.n	800564a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800563c:	4b15      	ldr	r3, [pc, #84]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005648:	e005      	b.n	8005656 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005654:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a0e      	ldr	r2, [pc, #56]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800565c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005662:	f7fb fc71 	bl	8000f48 <HAL_GetTick>
 8005666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005668:	e008      	b.n	800567c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800566a:	f7fb fc6d 	bl	8000f48 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e006      	b.n	800568a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	58024400 	.word	0x58024400
 8005698:	ffff0007 	.word	0xffff0007

0800569c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056aa:	4b53      	ldr	r3, [pc, #332]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d101      	bne.n	80056ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e099      	b.n	80057ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056ba:	4b4f      	ldr	r3, [pc, #316]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a4e      	ldr	r2, [pc, #312]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c6:	f7fb fc3f 	bl	8000f48 <HAL_GetTick>
 80056ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056cc:	e008      	b.n	80056e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056ce:	f7fb fc3b 	bl	8000f48 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e086      	b.n	80057ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056e0:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056ec:	4b42      	ldr	r3, [pc, #264]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	051b      	lsls	r3, r3, #20
 80056fa:	493f      	ldr	r1, [pc, #252]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	628b      	str	r3, [r1, #40]	; 0x28
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	3b01      	subs	r3, #1
 8005706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	3b01      	subs	r3, #1
 8005710:	025b      	lsls	r3, r3, #9
 8005712:	b29b      	uxth	r3, r3
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	3b01      	subs	r3, #1
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	3b01      	subs	r3, #1
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005730:	4931      	ldr	r1, [pc, #196]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005732:	4313      	orrs	r3, r2
 8005734:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	492d      	ldr	r1, [pc, #180]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005744:	4313      	orrs	r3, r2
 8005746:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005748:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	4928      	ldr	r1, [pc, #160]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800575a:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576a:	4b24      	ldr	r3, [pc, #144]	; (80057fc <RCCEx_PLL3_Config+0x160>)
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	69d2      	ldr	r2, [r2, #28]
 8005772:	00d2      	lsls	r2, r2, #3
 8005774:	4920      	ldr	r1, [pc, #128]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800577a:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005792:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005796:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005798:	e00f      	b.n	80057ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d106      	bne.n	80057ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057a0:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057ac:	e005      	b.n	80057ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057ba:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c6:	f7fb fbbf 	bl	8000f48 <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057cc:	e008      	b.n	80057e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057ce:	f7fb fbbb 	bl	8000f48 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e006      	b.n	80057ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
 80057fc:	ffff0007 	.word	0xffff0007

08005800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e042      	b.n	8005898 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fb f9c9 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2224      	movs	r2, #36	; 0x24
 800582e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f82c 	bl	80058a0 <UART_SetConfig>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e022      	b.n	8005898 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fe7e 	bl	800655c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800586e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800587e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 ff05 	bl	80066a0 <UART_CheckIdleState>
 8005896:	4603      	mov	r3, r0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a0:	b5b0      	push	{r4, r5, r7, lr}
 80058a2:	b08e      	sub	sp, #56	; 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4bbf      	ldr	r3, [pc, #764]	; (8005bcc <UART_SetConfig+0x32c>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058d6:	430b      	orrs	r3, r1
 80058d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4ab5      	ldr	r2, [pc, #724]	; (8005bd0 <UART_SetConfig+0x330>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005906:	4313      	orrs	r3, r2
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	4bb0      	ldr	r3, [pc, #704]	; (8005bd4 <UART_SetConfig+0x334>)
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800591a:	430b      	orrs	r3, r1
 800591c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	f023 010f 	bic.w	r1, r3, #15
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4aa7      	ldr	r2, [pc, #668]	; (8005bd8 <UART_SetConfig+0x338>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d176      	bne.n	8005a2c <UART_SetConfig+0x18c>
 800593e:	4ba7      	ldr	r3, [pc, #668]	; (8005bdc <UART_SetConfig+0x33c>)
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005946:	2b28      	cmp	r3, #40	; 0x28
 8005948:	d86c      	bhi.n	8005a24 <UART_SetConfig+0x184>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0xb0>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	080059f5 	.word	0x080059f5
 8005954:	08005a25 	.word	0x08005a25
 8005958:	08005a25 	.word	0x08005a25
 800595c:	08005a25 	.word	0x08005a25
 8005960:	08005a25 	.word	0x08005a25
 8005964:	08005a25 	.word	0x08005a25
 8005968:	08005a25 	.word	0x08005a25
 800596c:	08005a25 	.word	0x08005a25
 8005970:	080059fd 	.word	0x080059fd
 8005974:	08005a25 	.word	0x08005a25
 8005978:	08005a25 	.word	0x08005a25
 800597c:	08005a25 	.word	0x08005a25
 8005980:	08005a25 	.word	0x08005a25
 8005984:	08005a25 	.word	0x08005a25
 8005988:	08005a25 	.word	0x08005a25
 800598c:	08005a25 	.word	0x08005a25
 8005990:	08005a05 	.word	0x08005a05
 8005994:	08005a25 	.word	0x08005a25
 8005998:	08005a25 	.word	0x08005a25
 800599c:	08005a25 	.word	0x08005a25
 80059a0:	08005a25 	.word	0x08005a25
 80059a4:	08005a25 	.word	0x08005a25
 80059a8:	08005a25 	.word	0x08005a25
 80059ac:	08005a25 	.word	0x08005a25
 80059b0:	08005a0d 	.word	0x08005a0d
 80059b4:	08005a25 	.word	0x08005a25
 80059b8:	08005a25 	.word	0x08005a25
 80059bc:	08005a25 	.word	0x08005a25
 80059c0:	08005a25 	.word	0x08005a25
 80059c4:	08005a25 	.word	0x08005a25
 80059c8:	08005a25 	.word	0x08005a25
 80059cc:	08005a25 	.word	0x08005a25
 80059d0:	08005a15 	.word	0x08005a15
 80059d4:	08005a25 	.word	0x08005a25
 80059d8:	08005a25 	.word	0x08005a25
 80059dc:	08005a25 	.word	0x08005a25
 80059e0:	08005a25 	.word	0x08005a25
 80059e4:	08005a25 	.word	0x08005a25
 80059e8:	08005a25 	.word	0x08005a25
 80059ec:	08005a25 	.word	0x08005a25
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	e326      	b.n	800604a <UART_SetConfig+0x7aa>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e322      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0a:	e31e      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a12:	e31a      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a14:	2320      	movs	r3, #32
 8005a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1a:	e316      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a1c:	2340      	movs	r3, #64	; 0x40
 8005a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a22:	e312      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2a:	e30e      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a6b      	ldr	r2, [pc, #428]	; (8005be0 <UART_SetConfig+0x340>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d130      	bne.n	8005a98 <UART_SetConfig+0x1f8>
 8005a36:	4b69      	ldr	r3, [pc, #420]	; (8005bdc <UART_SetConfig+0x33c>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d826      	bhi.n	8005a90 <UART_SetConfig+0x1f0>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0x1a8>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a61 	.word	0x08005a61
 8005a4c:	08005a69 	.word	0x08005a69
 8005a50:	08005a71 	.word	0x08005a71
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a66:	e2f0      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6e:	e2ec      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a76:	e2e8      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7e:	e2e4      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a80:	2320      	movs	r3, #32
 8005a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a86:	e2e0      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8e:	e2dc      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a96:	e2d8      	b.n	800604a <UART_SetConfig+0x7aa>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a51      	ldr	r2, [pc, #324]	; (8005be4 <UART_SetConfig+0x344>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d130      	bne.n	8005b04 <UART_SetConfig+0x264>
 8005aa2:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <UART_SetConfig+0x33c>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d826      	bhi.n	8005afc <UART_SetConfig+0x25c>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x214>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005acd 	.word	0x08005acd
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad2:	e2ba      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ada:	e2b6      	b.n	800604a <UART_SetConfig+0x7aa>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e2b2      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aea:	e2ae      	b.n	800604a <UART_SetConfig+0x7aa>
 8005aec:	2320      	movs	r3, #32
 8005aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af2:	e2aa      	b.n	800604a <UART_SetConfig+0x7aa>
 8005af4:	2340      	movs	r3, #64	; 0x40
 8005af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afa:	e2a6      	b.n	800604a <UART_SetConfig+0x7aa>
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b02:	e2a2      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a37      	ldr	r2, [pc, #220]	; (8005be8 <UART_SetConfig+0x348>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d130      	bne.n	8005b70 <UART_SetConfig+0x2d0>
 8005b0e:	4b33      	ldr	r3, [pc, #204]	; (8005bdc <UART_SetConfig+0x33c>)
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d826      	bhi.n	8005b68 <UART_SetConfig+0x2c8>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x280>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b39 	.word	0x08005b39
 8005b24:	08005b41 	.word	0x08005b41
 8005b28:	08005b49 	.word	0x08005b49
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e284      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e280      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e27c      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e278      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e274      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b60:	2340      	movs	r3, #64	; 0x40
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e270      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	e26c      	b.n	800604a <UART_SetConfig+0x7aa>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	; (8005bec <UART_SetConfig+0x34c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d142      	bne.n	8005c00 <UART_SetConfig+0x360>
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <UART_SetConfig+0x33c>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d838      	bhi.n	8005bf8 <UART_SetConfig+0x358>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <UART_SetConfig+0x2ec>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005bad 	.word	0x08005bad
 8005b94:	08005bb5 	.word	0x08005bb5
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bc5 	.word	0x08005bc5
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005baa:	e24e      	b.n	800604a <UART_SetConfig+0x7aa>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb2:	e24a      	b.n	800604a <UART_SetConfig+0x7aa>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bba:	e246      	b.n	800604a <UART_SetConfig+0x7aa>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc2:	e242      	b.n	800604a <UART_SetConfig+0x7aa>
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bca:	e23e      	b.n	800604a <UART_SetConfig+0x7aa>
 8005bcc:	cfff69f3 	.word	0xcfff69f3
 8005bd0:	58000c00 	.word	0x58000c00
 8005bd4:	11fff4ff 	.word	0x11fff4ff
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	40004400 	.word	0x40004400
 8005be4:	40004800 	.word	0x40004800
 8005be8:	40004c00 	.word	0x40004c00
 8005bec:	40005000 	.word	0x40005000
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf6:	e228      	b.n	800604a <UART_SetConfig+0x7aa>
 8005bf8:	2380      	movs	r3, #128	; 0x80
 8005bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfe:	e224      	b.n	800604a <UART_SetConfig+0x7aa>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4ab1      	ldr	r2, [pc, #708]	; (8005ecc <UART_SetConfig+0x62c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d176      	bne.n	8005cf8 <UART_SetConfig+0x458>
 8005c0a:	4bb1      	ldr	r3, [pc, #708]	; (8005ed0 <UART_SetConfig+0x630>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c12:	2b28      	cmp	r3, #40	; 0x28
 8005c14:	d86c      	bhi.n	8005cf0 <UART_SetConfig+0x450>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x37c>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005cc1 	.word	0x08005cc1
 8005c20:	08005cf1 	.word	0x08005cf1
 8005c24:	08005cf1 	.word	0x08005cf1
 8005c28:	08005cf1 	.word	0x08005cf1
 8005c2c:	08005cf1 	.word	0x08005cf1
 8005c30:	08005cf1 	.word	0x08005cf1
 8005c34:	08005cf1 	.word	0x08005cf1
 8005c38:	08005cf1 	.word	0x08005cf1
 8005c3c:	08005cc9 	.word	0x08005cc9
 8005c40:	08005cf1 	.word	0x08005cf1
 8005c44:	08005cf1 	.word	0x08005cf1
 8005c48:	08005cf1 	.word	0x08005cf1
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005cf1 	.word	0x08005cf1
 8005c54:	08005cf1 	.word	0x08005cf1
 8005c58:	08005cf1 	.word	0x08005cf1
 8005c5c:	08005cd1 	.word	0x08005cd1
 8005c60:	08005cf1 	.word	0x08005cf1
 8005c64:	08005cf1 	.word	0x08005cf1
 8005c68:	08005cf1 	.word	0x08005cf1
 8005c6c:	08005cf1 	.word	0x08005cf1
 8005c70:	08005cf1 	.word	0x08005cf1
 8005c74:	08005cf1 	.word	0x08005cf1
 8005c78:	08005cf1 	.word	0x08005cf1
 8005c7c:	08005cd9 	.word	0x08005cd9
 8005c80:	08005cf1 	.word	0x08005cf1
 8005c84:	08005cf1 	.word	0x08005cf1
 8005c88:	08005cf1 	.word	0x08005cf1
 8005c8c:	08005cf1 	.word	0x08005cf1
 8005c90:	08005cf1 	.word	0x08005cf1
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005ce1 	.word	0x08005ce1
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005cf1 	.word	0x08005cf1
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cf1 	.word	0x08005cf1
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc6:	e1c0      	b.n	800604a <UART_SetConfig+0x7aa>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cce:	e1bc      	b.n	800604a <UART_SetConfig+0x7aa>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd6:	e1b8      	b.n	800604a <UART_SetConfig+0x7aa>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cde:	e1b4      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce6:	e1b0      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cee:	e1ac      	b.n	800604a <UART_SetConfig+0x7aa>
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf6:	e1a8      	b.n	800604a <UART_SetConfig+0x7aa>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a75      	ldr	r2, [pc, #468]	; (8005ed4 <UART_SetConfig+0x634>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d130      	bne.n	8005d64 <UART_SetConfig+0x4c4>
 8005d02:	4b73      	ldr	r3, [pc, #460]	; (8005ed0 <UART_SetConfig+0x630>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d826      	bhi.n	8005d5c <UART_SetConfig+0x4bc>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x474>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d35 	.word	0x08005d35
 8005d1c:	08005d3d 	.word	0x08005d3d
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d32:	e18a      	b.n	800604a <UART_SetConfig+0x7aa>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3a:	e186      	b.n	800604a <UART_SetConfig+0x7aa>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e182      	b.n	800604a <UART_SetConfig+0x7aa>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e17e      	b.n	800604a <UART_SetConfig+0x7aa>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e17a      	b.n	800604a <UART_SetConfig+0x7aa>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e176      	b.n	800604a <UART_SetConfig+0x7aa>
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e172      	b.n	800604a <UART_SetConfig+0x7aa>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a5b      	ldr	r2, [pc, #364]	; (8005ed8 <UART_SetConfig+0x638>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d130      	bne.n	8005dd0 <UART_SetConfig+0x530>
 8005d6e:	4b58      	ldr	r3, [pc, #352]	; (8005ed0 <UART_SetConfig+0x630>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d826      	bhi.n	8005dc8 <UART_SetConfig+0x528>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x4e0>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9e:	e154      	b.n	800604a <UART_SetConfig+0x7aa>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e150      	b.n	800604a <UART_SetConfig+0x7aa>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e14c      	b.n	800604a <UART_SetConfig+0x7aa>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e148      	b.n	800604a <UART_SetConfig+0x7aa>
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e144      	b.n	800604a <UART_SetConfig+0x7aa>
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e140      	b.n	800604a <UART_SetConfig+0x7aa>
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e13c      	b.n	800604a <UART_SetConfig+0x7aa>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a41      	ldr	r2, [pc, #260]	; (8005edc <UART_SetConfig+0x63c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f040 8082 	bne.w	8005ee0 <UART_SetConfig+0x640>
 8005ddc:	4b3c      	ldr	r3, [pc, #240]	; (8005ed0 <UART_SetConfig+0x630>)
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de4:	2b28      	cmp	r3, #40	; 0x28
 8005de6:	d86d      	bhi.n	8005ec4 <UART_SetConfig+0x624>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x550>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e95 	.word	0x08005e95
 8005df4:	08005ec5 	.word	0x08005ec5
 8005df8:	08005ec5 	.word	0x08005ec5
 8005dfc:	08005ec5 	.word	0x08005ec5
 8005e00:	08005ec5 	.word	0x08005ec5
 8005e04:	08005ec5 	.word	0x08005ec5
 8005e08:	08005ec5 	.word	0x08005ec5
 8005e0c:	08005ec5 	.word	0x08005ec5
 8005e10:	08005e9d 	.word	0x08005e9d
 8005e14:	08005ec5 	.word	0x08005ec5
 8005e18:	08005ec5 	.word	0x08005ec5
 8005e1c:	08005ec5 	.word	0x08005ec5
 8005e20:	08005ec5 	.word	0x08005ec5
 8005e24:	08005ec5 	.word	0x08005ec5
 8005e28:	08005ec5 	.word	0x08005ec5
 8005e2c:	08005ec5 	.word	0x08005ec5
 8005e30:	08005ea5 	.word	0x08005ea5
 8005e34:	08005ec5 	.word	0x08005ec5
 8005e38:	08005ec5 	.word	0x08005ec5
 8005e3c:	08005ec5 	.word	0x08005ec5
 8005e40:	08005ec5 	.word	0x08005ec5
 8005e44:	08005ec5 	.word	0x08005ec5
 8005e48:	08005ec5 	.word	0x08005ec5
 8005e4c:	08005ec5 	.word	0x08005ec5
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005ec5 	.word	0x08005ec5
 8005e58:	08005ec5 	.word	0x08005ec5
 8005e5c:	08005ec5 	.word	0x08005ec5
 8005e60:	08005ec5 	.word	0x08005ec5
 8005e64:	08005ec5 	.word	0x08005ec5
 8005e68:	08005ec5 	.word	0x08005ec5
 8005e6c:	08005ec5 	.word	0x08005ec5
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005ec5 	.word	0x08005ec5
 8005e78:	08005ec5 	.word	0x08005ec5
 8005e7c:	08005ec5 	.word	0x08005ec5
 8005e80:	08005ec5 	.word	0x08005ec5
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ec5 	.word	0x08005ec5
 8005e8c:	08005ec5 	.word	0x08005ec5
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e0d6      	b.n	800604a <UART_SetConfig+0x7aa>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e0d2      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e0ce      	b.n	800604a <UART_SetConfig+0x7aa>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	e0ca      	b.n	800604a <UART_SetConfig+0x7aa>
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eba:	e0c6      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec2:	e0c2      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eca:	e0be      	b.n	800604a <UART_SetConfig+0x7aa>
 8005ecc:	40011400 	.word	0x40011400
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	40007800 	.word	0x40007800
 8005ed8:	40007c00 	.word	0x40007c00
 8005edc:	40011800 	.word	0x40011800
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4aad      	ldr	r2, [pc, #692]	; (800619c <UART_SetConfig+0x8fc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d176      	bne.n	8005fd8 <UART_SetConfig+0x738>
 8005eea:	4bad      	ldr	r3, [pc, #692]	; (80061a0 <UART_SetConfig+0x900>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef2:	2b28      	cmp	r3, #40	; 0x28
 8005ef4:	d86c      	bhi.n	8005fd0 <UART_SetConfig+0x730>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x65c>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005fa1 	.word	0x08005fa1
 8005f00:	08005fd1 	.word	0x08005fd1
 8005f04:	08005fd1 	.word	0x08005fd1
 8005f08:	08005fd1 	.word	0x08005fd1
 8005f0c:	08005fd1 	.word	0x08005fd1
 8005f10:	08005fd1 	.word	0x08005fd1
 8005f14:	08005fd1 	.word	0x08005fd1
 8005f18:	08005fd1 	.word	0x08005fd1
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fd1 	.word	0x08005fd1
 8005f24:	08005fd1 	.word	0x08005fd1
 8005f28:	08005fd1 	.word	0x08005fd1
 8005f2c:	08005fd1 	.word	0x08005fd1
 8005f30:	08005fd1 	.word	0x08005fd1
 8005f34:	08005fd1 	.word	0x08005fd1
 8005f38:	08005fd1 	.word	0x08005fd1
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fd1 	.word	0x08005fd1
 8005f44:	08005fd1 	.word	0x08005fd1
 8005f48:	08005fd1 	.word	0x08005fd1
 8005f4c:	08005fd1 	.word	0x08005fd1
 8005f50:	08005fd1 	.word	0x08005fd1
 8005f54:	08005fd1 	.word	0x08005fd1
 8005f58:	08005fd1 	.word	0x08005fd1
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fd1 	.word	0x08005fd1
 8005f64:	08005fd1 	.word	0x08005fd1
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005fd1 	.word	0x08005fd1
 8005f70:	08005fd1 	.word	0x08005fd1
 8005f74:	08005fd1 	.word	0x08005fd1
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fd1 	.word	0x08005fd1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa6:	e050      	b.n	800604a <UART_SetConfig+0x7aa>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	e04c      	b.n	800604a <UART_SetConfig+0x7aa>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb6:	e048      	b.n	800604a <UART_SetConfig+0x7aa>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fbe:	e044      	b.n	800604a <UART_SetConfig+0x7aa>
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc6:	e040      	b.n	800604a <UART_SetConfig+0x7aa>
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fce:	e03c      	b.n	800604a <UART_SetConfig+0x7aa>
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd6:	e038      	b.n	800604a <UART_SetConfig+0x7aa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a71      	ldr	r2, [pc, #452]	; (80061a4 <UART_SetConfig+0x904>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d130      	bne.n	8006044 <UART_SetConfig+0x7a4>
 8005fe2:	4b6f      	ldr	r3, [pc, #444]	; (80061a0 <UART_SetConfig+0x900>)
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d826      	bhi.n	800603c <UART_SetConfig+0x79c>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x754>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006015 	.word	0x08006015
 8005ffc:	0800601d 	.word	0x0800601d
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	2302      	movs	r3, #2
 800600e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006012:	e01a      	b.n	800604a <UART_SetConfig+0x7aa>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601a:	e016      	b.n	800604a <UART_SetConfig+0x7aa>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006022:	e012      	b.n	800604a <UART_SetConfig+0x7aa>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602a:	e00e      	b.n	800604a <UART_SetConfig+0x7aa>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006032:	e00a      	b.n	800604a <UART_SetConfig+0x7aa>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603a:	e006      	b.n	800604a <UART_SetConfig+0x7aa>
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e002      	b.n	800604a <UART_SetConfig+0x7aa>
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a55      	ldr	r2, [pc, #340]	; (80061a4 <UART_SetConfig+0x904>)
 8006050:	4293      	cmp	r3, r2
 8006052:	f040 80f0 	bne.w	8006236 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800605a:	2b20      	cmp	r3, #32
 800605c:	dc46      	bgt.n	80060ec <UART_SetConfig+0x84c>
 800605e:	2b02      	cmp	r3, #2
 8006060:	db75      	blt.n	800614e <UART_SetConfig+0x8ae>
 8006062:	3b02      	subs	r3, #2
 8006064:	2b1e      	cmp	r3, #30
 8006066:	d872      	bhi.n	800614e <UART_SetConfig+0x8ae>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <UART_SetConfig+0x7d0>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	080060f3 	.word	0x080060f3
 8006074:	0800614f 	.word	0x0800614f
 8006078:	080060fb 	.word	0x080060fb
 800607c:	0800614f 	.word	0x0800614f
 8006080:	0800614f 	.word	0x0800614f
 8006084:	0800614f 	.word	0x0800614f
 8006088:	0800610b 	.word	0x0800610b
 800608c:	0800614f 	.word	0x0800614f
 8006090:	0800614f 	.word	0x0800614f
 8006094:	0800614f 	.word	0x0800614f
 8006098:	0800614f 	.word	0x0800614f
 800609c:	0800614f 	.word	0x0800614f
 80060a0:	0800614f 	.word	0x0800614f
 80060a4:	0800614f 	.word	0x0800614f
 80060a8:	0800611b 	.word	0x0800611b
 80060ac:	0800614f 	.word	0x0800614f
 80060b0:	0800614f 	.word	0x0800614f
 80060b4:	0800614f 	.word	0x0800614f
 80060b8:	0800614f 	.word	0x0800614f
 80060bc:	0800614f 	.word	0x0800614f
 80060c0:	0800614f 	.word	0x0800614f
 80060c4:	0800614f 	.word	0x0800614f
 80060c8:	0800614f 	.word	0x0800614f
 80060cc:	0800614f 	.word	0x0800614f
 80060d0:	0800614f 	.word	0x0800614f
 80060d4:	0800614f 	.word	0x0800614f
 80060d8:	0800614f 	.word	0x0800614f
 80060dc:	0800614f 	.word	0x0800614f
 80060e0:	0800614f 	.word	0x0800614f
 80060e4:	0800614f 	.word	0x0800614f
 80060e8:	08006141 	.word	0x08006141
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d02a      	beq.n	8006146 <UART_SetConfig+0x8a6>
 80060f0:	e02d      	b.n	800614e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80060f2:	f7fe ff63 	bl	8004fbc <HAL_RCCEx_GetD3PCLK1Freq>
 80060f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060f8:	e02f      	b.n	800615a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060fa:	f107 0314 	add.w	r3, r7, #20
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe ff72 	bl	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006108:	e027      	b.n	800615a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800610a:	f107 0308 	add.w	r3, r7, #8
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff f8be 	bl	8005290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006118:	e01f      	b.n	800615a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800611a:	4b21      	ldr	r3, [pc, #132]	; (80061a0 <UART_SetConfig+0x900>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006126:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <UART_SetConfig+0x900>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	08db      	lsrs	r3, r3, #3
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	4a1d      	ldr	r2, [pc, #116]	; (80061a8 <UART_SetConfig+0x908>)
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006138:	e00f      	b.n	800615a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <UART_SetConfig+0x908>)
 800613c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800613e:	e00c      	b.n	800615a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006140:	4b1a      	ldr	r3, [pc, #104]	; (80061ac <UART_SetConfig+0x90c>)
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006144:	e009      	b.n	800615a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800614c:	e005      	b.n	800615a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 81e6 	beq.w	800652e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	4a12      	ldr	r2, [pc, #72]	; (80061b0 <UART_SetConfig+0x910>)
 8006168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616c:	461a      	mov	r2, r3
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	fbb3 f3f2 	udiv	r3, r3, r2
 8006174:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4413      	add	r3, r2
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	429a      	cmp	r2, r3
 8006184:	d305      	bcc.n	8006192 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	429a      	cmp	r2, r3
 8006190:	d910      	bls.n	80061b4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006198:	e1c9      	b.n	800652e <UART_SetConfig+0xc8e>
 800619a:	bf00      	nop
 800619c:	40011c00 	.word	0x40011c00
 80061a0:	58024400 	.word	0x58024400
 80061a4:	58000c00 	.word	0x58000c00
 80061a8:	03d09000 	.word	0x03d09000
 80061ac:	003d0900 	.word	0x003d0900
 80061b0:	0800a040 	.word	0x0800a040
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	4618      	mov	r0, r3
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	4ac1      	ldr	r2, [pc, #772]	; (80064c8 <UART_SetConfig+0xc28>)
 80061c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	f7fa f89e 	bl	800030c <__aeabi_uldivmod>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	020b      	lsls	r3, r1, #8
 80061e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061e6:	0202      	lsls	r2, r0, #8
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	6849      	ldr	r1, [r1, #4]
 80061ec:	0849      	lsrs	r1, r1, #1
 80061ee:	4608      	mov	r0, r1
 80061f0:	f04f 0100 	mov.w	r1, #0
 80061f4:	1814      	adds	r4, r2, r0
 80061f6:	eb43 0501 	adc.w	r5, r3, r1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	461a      	mov	r2, r3
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	4620      	mov	r0, r4
 8006206:	4629      	mov	r1, r5
 8006208:	f7fa f880 	bl	800030c <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800621a:	d308      	bcc.n	800622e <UART_SetConfig+0x98e>
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006222:	d204      	bcs.n	800622e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	e17f      	b.n	800652e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006234:	e17b      	b.n	800652e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623e:	f040 80be 	bne.w	80063be <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8006242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006246:	2b20      	cmp	r3, #32
 8006248:	dc48      	bgt.n	80062dc <UART_SetConfig+0xa3c>
 800624a:	2b00      	cmp	r3, #0
 800624c:	db7b      	blt.n	8006346 <UART_SetConfig+0xaa6>
 800624e:	2b20      	cmp	r3, #32
 8006250:	d879      	bhi.n	8006346 <UART_SetConfig+0xaa6>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0x9b8>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	080062e3 	.word	0x080062e3
 800625c:	080062eb 	.word	0x080062eb
 8006260:	08006347 	.word	0x08006347
 8006264:	08006347 	.word	0x08006347
 8006268:	080062f3 	.word	0x080062f3
 800626c:	08006347 	.word	0x08006347
 8006270:	08006347 	.word	0x08006347
 8006274:	08006347 	.word	0x08006347
 8006278:	08006303 	.word	0x08006303
 800627c:	08006347 	.word	0x08006347
 8006280:	08006347 	.word	0x08006347
 8006284:	08006347 	.word	0x08006347
 8006288:	08006347 	.word	0x08006347
 800628c:	08006347 	.word	0x08006347
 8006290:	08006347 	.word	0x08006347
 8006294:	08006347 	.word	0x08006347
 8006298:	08006313 	.word	0x08006313
 800629c:	08006347 	.word	0x08006347
 80062a0:	08006347 	.word	0x08006347
 80062a4:	08006347 	.word	0x08006347
 80062a8:	08006347 	.word	0x08006347
 80062ac:	08006347 	.word	0x08006347
 80062b0:	08006347 	.word	0x08006347
 80062b4:	08006347 	.word	0x08006347
 80062b8:	08006347 	.word	0x08006347
 80062bc:	08006347 	.word	0x08006347
 80062c0:	08006347 	.word	0x08006347
 80062c4:	08006347 	.word	0x08006347
 80062c8:	08006347 	.word	0x08006347
 80062cc:	08006347 	.word	0x08006347
 80062d0:	08006347 	.word	0x08006347
 80062d4:	08006347 	.word	0x08006347
 80062d8:	08006339 	.word	0x08006339
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d02e      	beq.n	800633e <UART_SetConfig+0xa9e>
 80062e0:	e031      	b.n	8006346 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7fd ff45 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 80062e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062e8:	e033      	b.n	8006352 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ea:	f7fd ff57 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 80062ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062f0:	e02f      	b.n	8006352 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062f2:	f107 0314 	add.w	r3, r7, #20
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fe76 	bl	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006300:	e027      	b.n	8006352 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe ffc2 	bl	8005290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006310:	e01f      	b.n	8006352 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006312:	4b6e      	ldr	r3, [pc, #440]	; (80064cc <UART_SetConfig+0xc2c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800631e:	4b6b      	ldr	r3, [pc, #428]	; (80064cc <UART_SetConfig+0xc2c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	08db      	lsrs	r3, r3, #3
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	4a69      	ldr	r2, [pc, #420]	; (80064d0 <UART_SetConfig+0xc30>)
 800632a:	fa22 f303 	lsr.w	r3, r2, r3
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006330:	e00f      	b.n	8006352 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006332:	4b67      	ldr	r3, [pc, #412]	; (80064d0 <UART_SetConfig+0xc30>)
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006336:	e00c      	b.n	8006352 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006338:	4b66      	ldr	r3, [pc, #408]	; (80064d4 <UART_SetConfig+0xc34>)
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800633c:	e009      	b.n	8006352 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80ea 	beq.w	800652e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	4a5a      	ldr	r2, [pc, #360]	; (80064c8 <UART_SetConfig+0xc28>)
 8006360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006364:	461a      	mov	r2, r3
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	fbb3 f3f2 	udiv	r3, r3, r2
 800636c:	005a      	lsls	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d916      	bls.n	80063b6 <UART_SetConfig+0xb16>
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638e:	d212      	bcs.n	80063b6 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	b29b      	uxth	r3, r3
 8006394:	f023 030f 	bic.w	r3, r3, #15
 8006398:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063a8:	4313      	orrs	r3, r2
 80063aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063b2:	60da      	str	r2, [r3, #12]
 80063b4:	e0bb      	b.n	800652e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063bc:	e0b7      	b.n	800652e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	dc4a      	bgt.n	800645c <UART_SetConfig+0xbbc>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f2c0 8086 	blt.w	80064d8 <UART_SetConfig+0xc38>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	f200 8083 	bhi.w	80064d8 <UART_SetConfig+0xc38>
 80063d2:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0xb38>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	08006463 	.word	0x08006463
 80063dc:	0800646b 	.word	0x0800646b
 80063e0:	080064d9 	.word	0x080064d9
 80063e4:	080064d9 	.word	0x080064d9
 80063e8:	08006473 	.word	0x08006473
 80063ec:	080064d9 	.word	0x080064d9
 80063f0:	080064d9 	.word	0x080064d9
 80063f4:	080064d9 	.word	0x080064d9
 80063f8:	08006483 	.word	0x08006483
 80063fc:	080064d9 	.word	0x080064d9
 8006400:	080064d9 	.word	0x080064d9
 8006404:	080064d9 	.word	0x080064d9
 8006408:	080064d9 	.word	0x080064d9
 800640c:	080064d9 	.word	0x080064d9
 8006410:	080064d9 	.word	0x080064d9
 8006414:	080064d9 	.word	0x080064d9
 8006418:	08006493 	.word	0x08006493
 800641c:	080064d9 	.word	0x080064d9
 8006420:	080064d9 	.word	0x080064d9
 8006424:	080064d9 	.word	0x080064d9
 8006428:	080064d9 	.word	0x080064d9
 800642c:	080064d9 	.word	0x080064d9
 8006430:	080064d9 	.word	0x080064d9
 8006434:	080064d9 	.word	0x080064d9
 8006438:	080064d9 	.word	0x080064d9
 800643c:	080064d9 	.word	0x080064d9
 8006440:	080064d9 	.word	0x080064d9
 8006444:	080064d9 	.word	0x080064d9
 8006448:	080064d9 	.word	0x080064d9
 800644c:	080064d9 	.word	0x080064d9
 8006450:	080064d9 	.word	0x080064d9
 8006454:	080064d9 	.word	0x080064d9
 8006458:	080064b9 	.word	0x080064b9
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d02e      	beq.n	80064be <UART_SetConfig+0xc1e>
 8006460:	e03a      	b.n	80064d8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006462:	f7fd fe85 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8006466:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006468:	e03c      	b.n	80064e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646a:	f7fd fe97 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 800646e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006470:	e038      	b.n	80064e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006472:	f107 0314 	add.w	r3, r7, #20
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fdb6 	bl	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006480:	e030      	b.n	80064e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe ff02 	bl	8005290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006490:	e028      	b.n	80064e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006492:	4b0e      	ldr	r3, [pc, #56]	; (80064cc <UART_SetConfig+0xc2c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <UART_SetConfig+0xc2c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	08db      	lsrs	r3, r3, #3
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <UART_SetConfig+0xc30>)
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064b0:	e018      	b.n	80064e4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <UART_SetConfig+0xc30>)
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064b6:	e015      	b.n	80064e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <UART_SetConfig+0xc34>)
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064bc:	e012      	b.n	80064e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c4:	e00e      	b.n	80064e4 <UART_SetConfig+0xc44>
 80064c6:	bf00      	nop
 80064c8:	0800a040 	.word	0x0800a040
 80064cc:	58024400 	.word	0x58024400
 80064d0:	03d09000 	.word	0x03d09000
 80064d4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80064e2:	bf00      	nop
    }

    if (pclk != 0U)
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d021      	beq.n	800652e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	4a1a      	ldr	r2, [pc, #104]	; (8006558 <UART_SetConfig+0xcb8>)
 80064f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	441a      	add	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	b29b      	uxth	r3, r3
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	2b0f      	cmp	r3, #15
 8006514:	d908      	bls.n	8006528 <UART_SetConfig+0xc88>
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d204      	bcs.n	8006528 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	e002      	b.n	800652e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800654a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800654e:	4618      	mov	r0, r3
 8006550:	3738      	adds	r7, #56	; 0x38
 8006552:	46bd      	mov	sp, r7
 8006554:	bdb0      	pop	{r4, r5, r7, pc}
 8006556:	bf00      	nop
 8006558:	0800a040 	.word	0x0800a040

0800655c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01a      	beq.n	8006672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800665a:	d10a      	bne.n	8006672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066b0:	f7fa fc4a 	bl	8000f48 <HAL_GetTick>
 80066b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d10e      	bne.n	80066e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f82f 	bl	8006736 <UART_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e025      	b.n	800672e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d10e      	bne.n	800670e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f819 	bl	8006736 <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e00f      	b.n	800672e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	603b      	str	r3, [r7, #0]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006746:	e062      	b.n	800680e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d05e      	beq.n	800680e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006750:	f7fa fbfa 	bl	8000f48 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <UART_WaitOnFlagUntilTimeout+0x30>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11d      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006774:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e045      	b.n	800682e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d02e      	beq.n	800680e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d126      	bne.n	800680e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e00f      	b.n	800682e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4013      	ands	r3, r2
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	429a      	cmp	r2, r3
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	429a      	cmp	r2, r3
 800682a:	d08d      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_UARTEx_DisableFifoMode+0x16>
 8006848:	2302      	movs	r3, #2
 800684a:	e027      	b.n	800689c <HAL_UARTEx_DisableFifoMode+0x66>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2224      	movs	r2, #36	; 0x24
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800687a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068bc:	2302      	movs	r3, #2
 80068be:	e02d      	b.n	800691c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2224      	movs	r2, #36	; 0x24
 80068cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0201 	bic.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f84f 	bl	80069a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e02d      	b.n	8006998 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2224      	movs	r2, #36	; 0x24
 8006948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f811 	bl	80069a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d108      	bne.n	80069c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069c0:	e031      	b.n	8006a26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069c2:	2310      	movs	r3, #16
 80069c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069c6:	2310      	movs	r3, #16
 80069c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	0e5b      	lsrs	r3, r3, #25
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	0f5b      	lsrs	r3, r3, #29
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	7b3a      	ldrb	r2, [r7, #12]
 80069ee:	4911      	ldr	r1, [pc, #68]	; (8006a34 <UARTEx_SetNbDataToProcess+0x94>)
 80069f0:	5c8a      	ldrb	r2, [r1, r2]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069f6:	7b3a      	ldrb	r2, [r7, #12]
 80069f8:	490f      	ldr	r1, [pc, #60]	; (8006a38 <UARTEx_SetNbDataToProcess+0x98>)
 80069fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	7b7a      	ldrb	r2, [r7, #13]
 8006a0c:	4909      	ldr	r1, [pc, #36]	; (8006a34 <UARTEx_SetNbDataToProcess+0x94>)
 8006a0e:	5c8a      	ldrb	r2, [r1, r2]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a14:	7b7a      	ldrb	r2, [r7, #13]
 8006a16:	4908      	ldr	r1, [pc, #32]	; (8006a38 <UARTEx_SetNbDataToProcess+0x98>)
 8006a18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	0800a058 	.word	0x0800a058
 8006a38:	0800a060 	.word	0x0800a060

08006a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	f107 001c 	add.w	r0, r7, #28
 8006a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d120      	bne.n	8006a96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	4b2a      	ldr	r3, [pc, #168]	; (8006b10 <USB_CoreInit+0xd4>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d105      	bne.n	8006a8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fb14 	bl	80080b8 <USB_CoreReset>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e01a      	b.n	8006acc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 fb08 	bl	80080b8 <USB_CoreReset>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
 8006abe:	e005      	b.n	8006acc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d116      	bne.n	8006b00 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <USB_CoreInit+0xd8>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f043 0206 	orr.w	r2, r3, #6
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f043 0220 	orr.w	r2, r3, #32
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b0c:	b004      	add	sp, #16
 8006b0e:	4770      	bx	lr
 8006b10:	ffbdffbf 	.word	0xffbdffbf
 8006b14:	03ee0000 	.word	0x03ee0000

08006b18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4613      	mov	r3, r2
 8006b24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d165      	bne.n	8006bf8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4a41      	ldr	r2, [pc, #260]	; (8006c34 <USB_SetTurnaroundTime+0x11c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d906      	bls.n	8006b42 <USB_SetTurnaroundTime+0x2a>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4a40      	ldr	r2, [pc, #256]	; (8006c38 <USB_SetTurnaroundTime+0x120>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d202      	bcs.n	8006b42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b3c:	230f      	movs	r3, #15
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	e062      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4a3c      	ldr	r2, [pc, #240]	; (8006c38 <USB_SetTurnaroundTime+0x120>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d306      	bcc.n	8006b58 <USB_SetTurnaroundTime+0x40>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4a3b      	ldr	r2, [pc, #236]	; (8006c3c <USB_SetTurnaroundTime+0x124>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d202      	bcs.n	8006b58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b52:	230e      	movs	r3, #14
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e057      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4a38      	ldr	r2, [pc, #224]	; (8006c3c <USB_SetTurnaroundTime+0x124>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d306      	bcc.n	8006b6e <USB_SetTurnaroundTime+0x56>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <USB_SetTurnaroundTime+0x128>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d202      	bcs.n	8006b6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b68:	230d      	movs	r3, #13
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e04c      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	4a33      	ldr	r2, [pc, #204]	; (8006c40 <USB_SetTurnaroundTime+0x128>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d306      	bcc.n	8006b84 <USB_SetTurnaroundTime+0x6c>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4a32      	ldr	r2, [pc, #200]	; (8006c44 <USB_SetTurnaroundTime+0x12c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d802      	bhi.n	8006b84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b7e:	230c      	movs	r3, #12
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e041      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4a2f      	ldr	r2, [pc, #188]	; (8006c44 <USB_SetTurnaroundTime+0x12c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d906      	bls.n	8006b9a <USB_SetTurnaroundTime+0x82>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4a2e      	ldr	r2, [pc, #184]	; (8006c48 <USB_SetTurnaroundTime+0x130>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d802      	bhi.n	8006b9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b94:	230b      	movs	r3, #11
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e036      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4a2a      	ldr	r2, [pc, #168]	; (8006c48 <USB_SetTurnaroundTime+0x130>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d906      	bls.n	8006bb0 <USB_SetTurnaroundTime+0x98>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <USB_SetTurnaroundTime+0x134>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d802      	bhi.n	8006bb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006baa:	230a      	movs	r3, #10
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	e02b      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4a26      	ldr	r2, [pc, #152]	; (8006c4c <USB_SetTurnaroundTime+0x134>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d906      	bls.n	8006bc6 <USB_SetTurnaroundTime+0xae>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a25      	ldr	r2, [pc, #148]	; (8006c50 <USB_SetTurnaroundTime+0x138>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d202      	bcs.n	8006bc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bc0:	2309      	movs	r3, #9
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e020      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <USB_SetTurnaroundTime+0x138>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d306      	bcc.n	8006bdc <USB_SetTurnaroundTime+0xc4>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <USB_SetTurnaroundTime+0x13c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d802      	bhi.n	8006bdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e015      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <USB_SetTurnaroundTime+0x13c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d906      	bls.n	8006bf2 <USB_SetTurnaroundTime+0xda>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4a1c      	ldr	r2, [pc, #112]	; (8006c58 <USB_SetTurnaroundTime+0x140>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d202      	bcs.n	8006bf2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bec:	2307      	movs	r3, #7
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e00a      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bf2:	2306      	movs	r3, #6
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e007      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bfe:	2309      	movs	r3, #9
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	e001      	b.n	8006c08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c04:	2309      	movs	r3, #9
 8006c06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	029b      	lsls	r3, r3, #10
 8006c1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c20:	431a      	orrs	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	00d8acbf 	.word	0x00d8acbf
 8006c38:	00e4e1c0 	.word	0x00e4e1c0
 8006c3c:	00f42400 	.word	0x00f42400
 8006c40:	01067380 	.word	0x01067380
 8006c44:	011a499f 	.word	0x011a499f
 8006c48:	01312cff 	.word	0x01312cff
 8006c4c:	014ca43f 	.word	0x014ca43f
 8006c50:	016e3600 	.word	0x016e3600
 8006c54:	01a6ab1f 	.word	0x01a6ab1f
 8006c58:	01e84800 	.word	0x01e84800

08006c5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f043 0201 	orr.w	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f023 0201 	bic.w	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d106      	bne.n	8006ccc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	e00b      	b.n	8006ce4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	e001      	b.n	8006ce4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e003      	b.n	8006cec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ce4:	2032      	movs	r0, #50	; 0x32
 8006ce6:	f7fa f93b 	bl	8000f60 <HAL_Delay>

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b086      	sub	sp, #24
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d0e:	2300      	movs	r3, #0
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	e009      	b.n	8006d28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3340      	adds	r3, #64	; 0x40
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	2200      	movs	r2, #0
 8006d20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	3301      	adds	r3, #1
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b0e      	cmp	r3, #14
 8006d2c:	d9f2      	bls.n	8006d14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11c      	bne.n	8006d6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d42:	f043 0302 	orr.w	r3, r3, #2
 8006d46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e005      	b.n	8006d7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d80:	461a      	mov	r2, r3
 8006d82:	2300      	movs	r3, #0
 8006d84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d94:	461a      	mov	r2, r3
 8006d96:	680b      	ldr	r3, [r1, #0]
 8006d98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10c      	bne.n	8006dba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006da6:	2100      	movs	r1, #0
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f949 	bl	8007040 <USB_SetDevSpeed>
 8006dae:	e008      	b.n	8006dc2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006db0:	2101      	movs	r1, #1
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f944 	bl	8007040 <USB_SetDevSpeed>
 8006db8:	e003      	b.n	8006dc2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dba:	2103      	movs	r1, #3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f93f 	bl	8007040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dc2:	2110      	movs	r1, #16
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f8f3 	bl	8006fb0 <USB_FlushTxFifo>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f911 	bl	8006ffc <USB_FlushRxFifo>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	461a      	mov	r2, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df6:	461a      	mov	r2, r3
 8006df8:	2300      	movs	r3, #0
 8006dfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e02:	461a      	mov	r2, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	e043      	b.n	8006e96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e24:	d118      	bne.n	8006e58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	e013      	b.n	8006e6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e008      	b.n	8006e6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	461a      	mov	r2, r3
 8006e66:	2300      	movs	r3, #0
 8006e68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e76:	461a      	mov	r2, r3
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	3301      	adds	r3, #1
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d3b7      	bcc.n	8006e0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	e043      	b.n	8006f2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eba:	d118      	bne.n	8006eee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e013      	b.n	8006f00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e008      	b.n	8006f00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	461a      	mov	r2, r3
 8006efc:	2300      	movs	r3, #0
 8006efe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d3b7      	bcc.n	8006ea4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f043 0210 	orr.w	r2, r3, #16
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <USB_DevInit+0x2b4>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f043 0208 	orr.w	r2, r3, #8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d105      	bne.n	8006f98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	4b06      	ldr	r3, [pc, #24]	; (8006fac <USB_DevInit+0x2b8>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fa4:	b004      	add	sp, #16
 8006fa6:	4770      	bx	lr
 8006fa8:	803c3800 	.word	0x803c3800
 8006fac:	40000004 	.word	0x40000004

08006fb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	019b      	lsls	r3, r3, #6
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <USB_FlushTxFifo+0x48>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d901      	bls.n	8006fdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e006      	b.n	8006fea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d0f0      	beq.n	8006fca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	00030d40 	.word	0x00030d40

08006ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2210      	movs	r2, #16
 800700c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a09      	ldr	r2, [pc, #36]	; (800703c <USB_FlushRxFifo+0x40>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d901      	bls.n	8007020 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e006      	b.n	800702e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b10      	cmp	r3, #16
 800702a:	d0f0      	beq.n	800700e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	00030d40 	.word	0x00030d40

08007040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007072:	b480      	push	{r7}
 8007074:	b087      	sub	sp, #28
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0306 	and.w	r3, r3, #6
 800708a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]
 8007096:	e00a      	b.n	80070ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d002      	beq.n	80070a4 <USB_GetDevSpeed+0x32>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b06      	cmp	r3, #6
 80070a2:	d102      	bne.n	80070aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070a4:	2302      	movs	r3, #2
 80070a6:	75fb      	strb	r3, [r7, #23]
 80070a8:	e001      	b.n	80070ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070aa:	230f      	movs	r3, #15
 80070ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d139      	bne.n	800714c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	2101      	movs	r1, #1
 80070ea:	fa01 f303 	lsl.w	r3, r1, r3
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	68f9      	ldr	r1, [r7, #12]
 80070f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f6:	4313      	orrs	r3, r2
 80070f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d153      	bne.n	80071b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	78db      	ldrb	r3, [r3, #3]
 800712a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800712c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	059b      	lsls	r3, r3, #22
 8007132:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007134:	431a      	orrs	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	0159      	lsls	r1, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	440b      	add	r3, r1
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	4619      	mov	r1, r3
 8007144:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <USB_ActivateEndpoint+0x10c>)
 8007146:	4313      	orrs	r3, r2
 8007148:	600b      	str	r3, [r1, #0]
 800714a:	e035      	b.n	80071b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	2101      	movs	r1, #1
 800715e:	fa01 f303 	lsl.w	r3, r1, r3
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	68f9      	ldr	r1, [r7, #12]
 8007166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800716a:	4313      	orrs	r3, r2
 800716c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d119      	bne.n	80071b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	78db      	ldrb	r3, [r3, #3]
 800719e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071a0:	430b      	orrs	r3, r1
 80071a2:	431a      	orrs	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	0159      	lsls	r1, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	440b      	add	r3, r1
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	4619      	mov	r1, r3
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <USB_ActivateEndpoint+0x10c>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	10008000 	.word	0x10008000

080071cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d161      	bne.n	80072ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071fe:	d11f      	bne.n	8007240 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	440a      	add	r2, r1
 8007216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800721e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	440a      	add	r2, r1
 8007236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800723e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	2101      	movs	r1, #1
 8007252:	fa01 f303 	lsl.w	r3, r1, r3
 8007256:	b29b      	uxth	r3, r3
 8007258:	43db      	mvns	r3, r3
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007260:	4013      	ands	r3, r2
 8007262:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	2101      	movs	r1, #1
 8007276:	fa01 f303 	lsl.w	r3, r1, r3
 800727a:	b29b      	uxth	r3, r3
 800727c:	43db      	mvns	r3, r3
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007284:	4013      	ands	r3, r2
 8007286:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	0159      	lsls	r1, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	440b      	add	r3, r1
 800729e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a2:	4619      	mov	r1, r3
 80072a4:	4b35      	ldr	r3, [pc, #212]	; (800737c <USB_DeactivateEndpoint+0x1b0>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]
 80072aa:	e060      	b.n	800736e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c2:	d11f      	bne.n	8007304 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	2101      	movs	r1, #1
 8007316:	fa01 f303 	lsl.w	r3, r1, r3
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	43db      	mvns	r3, r3
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007324:	4013      	ands	r3, r2
 8007326:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	f003 030f 	and.w	r3, r3, #15
 8007338:	2101      	movs	r1, #1
 800733a:	fa01 f303 	lsl.w	r3, r1, r3
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	43db      	mvns	r3, r3
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007348:	4013      	ands	r3, r2
 800734a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	0159      	lsls	r1, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	440b      	add	r3, r1
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	4619      	mov	r1, r3
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <USB_DeactivateEndpoint+0x1b4>)
 800736a:	4013      	ands	r3, r2
 800736c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	ec337800 	.word	0xec337800
 8007380:	eff37800 	.word	0xeff37800

08007384 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	; 0x28
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	f040 8163 	bne.w	800766c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d132      	bne.n	8007414 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	0159      	lsls	r1, r3, #5
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	440b      	add	r3, r1
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	4619      	mov	r1, r3
 80073ca:	4ba5      	ldr	r3, [pc, #660]	; (8007660 <USB_EPStartXfer+0x2dc>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	0159      	lsls	r1, r3, #5
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	440b      	add	r3, r1
 8007406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740a:	4619      	mov	r1, r3
 800740c:	4b95      	ldr	r3, [pc, #596]	; (8007664 <USB_EPStartXfer+0x2e0>)
 800740e:	4013      	ands	r3, r2
 8007410:	610b      	str	r3, [r1, #16]
 8007412:	e074      	b.n	80074fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007420:	691a      	ldr	r2, [r3, #16]
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	0159      	lsls	r1, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	440b      	add	r3, r1
 800742a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742e:	4619      	mov	r1, r3
 8007430:	4b8c      	ldr	r3, [pc, #560]	; (8007664 <USB_EPStartXfer+0x2e0>)
 8007432:	4013      	ands	r3, r2
 8007434:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	0159      	lsls	r1, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	440b      	add	r3, r1
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	4619      	mov	r1, r3
 8007452:	4b83      	ldr	r3, [pc, #524]	; (8007660 <USB_EPStartXfer+0x2dc>)
 8007454:	4013      	ands	r3, r2
 8007456:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6959      	ldr	r1, [r3, #20]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	440b      	add	r3, r1
 8007470:	1e59      	subs	r1, r3, #1
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	fbb1 f3f3 	udiv	r3, r1, r3
 800747a:	04d9      	lsls	r1, r3, #19
 800747c:	4b7a      	ldr	r3, [pc, #488]	; (8007668 <USB_EPStartXfer+0x2e4>)
 800747e:	400b      	ands	r3, r1
 8007480:	69b9      	ldr	r1, [r7, #24]
 8007482:	0148      	lsls	r0, r1, #5
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	4401      	add	r1, r0
 8007488:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800748c:	4313      	orrs	r3, r2
 800748e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a6:	69b9      	ldr	r1, [r7, #24]
 80074a8:	0148      	lsls	r0, r1, #5
 80074aa:	69f9      	ldr	r1, [r7, #28]
 80074ac:	4401      	add	r1, r0
 80074ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074b2:	4313      	orrs	r3, r2
 80074b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	78db      	ldrb	r3, [r3, #3]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d11f      	bne.n	80074fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d14b      	bne.n	800759c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d009      	beq.n	8007520 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007518:	461a      	mov	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	78db      	ldrb	r3, [r3, #3]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d128      	bne.n	800757a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007534:	2b00      	cmp	r3, #0
 8007536:	d110      	bne.n	800755a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	440a      	add	r2, r1
 800754e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	e00f      	b.n	800757a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	440a      	add	r2, r1
 8007570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007578:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	0151      	lsls	r1, r2, #5
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	440a      	add	r2, r1
 8007590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e133      	b.n	8007804 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	0151      	lsls	r1, r2, #5
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	440a      	add	r2, r1
 80075b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	78db      	ldrb	r3, [r3, #3]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d015      	beq.n	80075f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 811b 	beq.w	8007804 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	2101      	movs	r1, #1
 80075e0:	fa01 f303 	lsl.w	r3, r1, r3
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ea:	4313      	orrs	r3, r2
 80075ec:	634b      	str	r3, [r1, #52]	; 0x34
 80075ee:	e109      	b.n	8007804 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d110      	bne.n	8007622 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e00f      	b.n	8007642 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007640:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	68d9      	ldr	r1, [r3, #12]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	b298      	uxth	r0, r3
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	4603      	mov	r3, r0
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 fa38 	bl	8007acc <USB_WritePacket>
 800765c:	e0d2      	b.n	8007804 <USB_EPStartXfer+0x480>
 800765e:	bf00      	nop
 8007660:	e007ffff 	.word	0xe007ffff
 8007664:	fff80000 	.word	0xfff80000
 8007668:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	0159      	lsls	r1, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	440b      	add	r3, r1
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	4619      	mov	r1, r3
 8007688:	4b61      	ldr	r3, [pc, #388]	; (8007810 <USB_EPStartXfer+0x48c>)
 800768a:	4013      	ands	r3, r2
 800768c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	0159      	lsls	r1, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	440b      	add	r3, r1
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	4619      	mov	r1, r3
 80076aa:	4b5a      	ldr	r3, [pc, #360]	; (8007814 <USB_EPStartXfer+0x490>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d123      	bne.n	8007700 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ce:	69b9      	ldr	r1, [r7, #24]
 80076d0:	0148      	lsls	r0, r1, #5
 80076d2:	69f9      	ldr	r1, [r7, #28]
 80076d4:	4401      	add	r1, r0
 80076d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076da:	4313      	orrs	r3, r2
 80076dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076fc:	6113      	str	r3, [r2, #16]
 80076fe:	e033      	b.n	8007768 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	695a      	ldr	r2, [r3, #20]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	4413      	add	r3, r2
 800770a:	1e5a      	subs	r2, r3, #1
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	8afb      	ldrh	r3, [r7, #22]
 8007726:	04d9      	lsls	r1, r3, #19
 8007728:	4b3b      	ldr	r3, [pc, #236]	; (8007818 <USB_EPStartXfer+0x494>)
 800772a:	400b      	ands	r3, r1
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	0148      	lsls	r0, r1, #5
 8007730:	69f9      	ldr	r1, [r7, #28]
 8007732:	4401      	add	r1, r0
 8007734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007738:	4313      	orrs	r3, r2
 800773a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	8af9      	ldrh	r1, [r7, #22]
 8007750:	fb01 f303 	mul.w	r3, r1, r3
 8007754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007758:	69b9      	ldr	r1, [r7, #24]
 800775a:	0148      	lsls	r0, r1, #5
 800775c:	69f9      	ldr	r1, [r7, #28]
 800775e:	4401      	add	r1, r0
 8007760:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007764:	4313      	orrs	r3, r2
 8007766:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d10d      	bne.n	800778a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	68d9      	ldr	r1, [r3, #12]
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007786:	460a      	mov	r2, r1
 8007788:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	78db      	ldrb	r3, [r3, #3]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d128      	bne.n	80077e4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d110      	bne.n	80077c4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e00f      	b.n	80077e4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007802:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	fff80000 	.word	0xfff80000
 8007814:	e007ffff 	.word	0xe007ffff
 8007818:	1ff80000 	.word	0x1ff80000

0800781c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	4613      	mov	r3, r2
 8007828:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b01      	cmp	r3, #1
 800783a:	f040 80cd 	bne.w	80079d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d132      	bne.n	80078ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	0159      	lsls	r1, r3, #5
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	440b      	add	r3, r1
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	4619      	mov	r1, r3
 8007862:	4b98      	ldr	r3, [pc, #608]	; (8007ac4 <USB_EP0StartXfer+0x2a8>)
 8007864:	4013      	ands	r3, r2
 8007866:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	0159      	lsls	r1, r3, #5
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	440b      	add	r3, r1
 800789e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a2:	4619      	mov	r1, r3
 80078a4:	4b88      	ldr	r3, [pc, #544]	; (8007ac8 <USB_EP0StartXfer+0x2ac>)
 80078a6:	4013      	ands	r3, r2
 80078a8:	610b      	str	r3, [r1, #16]
 80078aa:	e04e      	b.n	800794a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	0159      	lsls	r1, r3, #5
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	440b      	add	r3, r1
 80078c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c6:	4619      	mov	r1, r3
 80078c8:	4b7f      	ldr	r3, [pc, #508]	; (8007ac8 <USB_EP0StartXfer+0x2ac>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	0159      	lsls	r1, r3, #5
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	440b      	add	r3, r1
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	4619      	mov	r1, r3
 80078ea:	4b76      	ldr	r3, [pc, #472]	; (8007ac4 <USB_EP0StartXfer+0x2a8>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d903      	bls.n	8007904 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800793a:	6939      	ldr	r1, [r7, #16]
 800793c:	0148      	lsls	r0, r1, #5
 800793e:	6979      	ldr	r1, [r7, #20]
 8007940:	4401      	add	r1, r0
 8007942:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007946:	4313      	orrs	r3, r2
 8007948:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d11e      	bne.n	800798e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	461a      	mov	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	440a      	add	r2, r1
 8007982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	e092      	b.n	8007ab4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d07e      	beq.n	8007ab4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	2101      	movs	r1, #1
 80079c8:	fa01 f303 	lsl.w	r3, r1, r3
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079d2:	4313      	orrs	r3, r2
 80079d4:	634b      	str	r3, [r1, #52]	; 0x34
 80079d6:	e06d      	b.n	8007ab4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	691a      	ldr	r2, [r3, #16]
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	0159      	lsls	r1, r3, #5
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	440b      	add	r3, r1
 80079ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f2:	4619      	mov	r1, r3
 80079f4:	4b34      	ldr	r3, [pc, #208]	; (8007ac8 <USB_EP0StartXfer+0x2ac>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	0159      	lsls	r1, r3, #5
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	440b      	add	r3, r1
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	4619      	mov	r1, r3
 8007a16:	4b2b      	ldr	r3, [pc, #172]	; (8007ac4 <USB_EP0StartXfer+0x2a8>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	0151      	lsls	r1, r2, #5
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a62:	6939      	ldr	r1, [r7, #16]
 8007a64:	0148      	lsls	r0, r1, #5
 8007a66:	6979      	ldr	r1, [r7, #20]
 8007a68:	4401      	add	r1, r0
 8007a6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d10d      	bne.n	8007a94 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	68d9      	ldr	r1, [r3, #12]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a90:	460a      	mov	r2, r1
 8007a92:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	e007ffff 	.word	0xe007ffff
 8007ac8:	fff80000 	.word	0xfff80000

08007acc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b089      	sub	sp, #36	; 0x24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	460b      	mov	r3, r1
 8007adc:	71fb      	strb	r3, [r7, #7]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007aea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d123      	bne.n	8007b3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007af2:	88bb      	ldrh	r3, [r7, #4]
 8007af4:	3303      	adds	r3, #3
 8007af6:	089b      	lsrs	r3, r3, #2
 8007af8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007afa:	2300      	movs	r3, #0
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	e018      	b.n	8007b32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	031a      	lsls	r2, r3, #12
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3301      	adds	r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	3301      	adds	r3, #1
 8007b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d3e2      	bcc.n	8007b00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3724      	adds	r7, #36	; 0x24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b08b      	sub	sp, #44	; 0x2c
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b5e:	88fb      	ldrh	r3, [r7, #6]
 8007b60:	089b      	lsrs	r3, r3, #2
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b6e:	2300      	movs	r3, #0
 8007b70:	623b      	str	r3, [r7, #32]
 8007b72:	e014      	b.n	8007b9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	3301      	adds	r3, #1
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	3301      	adds	r3, #1
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	3301      	adds	r3, #1
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	3301      	adds	r3, #1
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	623b      	str	r3, [r7, #32]
 8007b9e:	6a3a      	ldr	r2, [r7, #32]
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d3e6      	bcc.n	8007b74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ba6:	8bfb      	ldrh	r3, [r7, #30]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01e      	beq.n	8007bea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f107 0310 	add.w	r3, r7, #16
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	701a      	strb	r2, [r3, #0]
      i++;
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	3301      	adds	r3, #1
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007bde:	8bfb      	ldrh	r3, [r7, #30]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007be4:	8bfb      	ldrh	r3, [r7, #30]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1ea      	bne.n	8007bc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	372c      	adds	r7, #44	; 0x2c
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d12c      	bne.n	8007c6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	db12      	blt.n	8007c4c <USB_EPSetStall+0x54>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00f      	beq.n	8007c4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	e02b      	b.n	8007cc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	db12      	blt.n	8007ca6 <USB_EPSetStall+0xae>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00f      	beq.n	8007ca6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ca4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d128      	bne.n	8007d42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	0151      	lsls	r1, r2, #5
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	440a      	add	r2, r1
 8007d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	78db      	ldrb	r3, [r3, #3]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d003      	beq.n	8007d20 <USB_EPClearStall+0x4c>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	78db      	ldrb	r3, [r3, #3]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d138      	bne.n	8007d92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	e027      	b.n	8007d92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	78db      	ldrb	r3, [r3, #3]
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d003      	beq.n	8007d72 <USB_EPClearStall+0x9e>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	78db      	ldrb	r3, [r3, #3]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d10f      	bne.n	8007d92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007dc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1a:	f023 0302 	bic.w	r3, r3, #2
 8007e1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e48:	f023 0303 	bic.w	r3, r3, #3
 8007e4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4013      	ands	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e88:	68fb      	ldr	r3, [r7, #12]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	0c1b      	lsrs	r3, r3, #16
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	4013      	ands	r3, r2
 8007eec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	b29b      	uxth	r3, r3
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b087      	sub	sp, #28
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6a:	01db      	lsls	r3, r3, #7
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	4013      	ands	r3, r2
 8007f86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f88:	68bb      	ldr	r3, [r7, #8]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <USB_ActivateSetup+0x44>)
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	fffff800 	.word	0xfffff800

08007ffc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	460b      	mov	r3, r1
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	333c      	adds	r3, #60	; 0x3c
 8008012:	3304      	adds	r3, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	4a26      	ldr	r2, [pc, #152]	; (80080b4 <USB_EP0_OutStart+0xb8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d90a      	bls.n	8008036 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800802c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008030:	d101      	bne.n	8008036 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	e037      	b.n	80080a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803c:	461a      	mov	r2, r3
 800803e:	2300      	movs	r3, #0
 8008040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008064:	f043 0318 	orr.w	r3, r3, #24
 8008068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008078:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800807c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800807e:	7afb      	ldrb	r3, [r7, #11]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10f      	bne.n	80080a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800809e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80080a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	4f54300a 	.word	0x4f54300a

080080b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4a13      	ldr	r2, [pc, #76]	; (800811c <USB_CoreReset+0x64>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d901      	bls.n	80080d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e01b      	b.n	800810e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	daf2      	bge.n	80080c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f043 0201 	orr.w	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a09      	ldr	r2, [pc, #36]	; (800811c <USB_CoreReset+0x64>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d901      	bls.n	8008100 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e006      	b.n	800810e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b01      	cmp	r3, #1
 800810a:	d0f0      	beq.n	80080ee <USB_CoreReset+0x36>

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	00030d40 	.word	0x00030d40

08008120 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800812c:	2010      	movs	r0, #16
 800812e:	f001 fedf 	bl	8009ef0 <USBD_static_malloc>
 8008132:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008142:	2302      	movs	r3, #2
 8008144:	e01b      	b.n	800817e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7c1b      	ldrb	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2207      	movs	r2, #7
 800815a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800815c:	e002      	b.n	8008164 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	220a      	movs	r2, #10
 8008162:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008164:	2304      	movs	r3, #4
 8008166:	2203      	movs	r2, #3
 8008168:	2181      	movs	r1, #129	; 0x81
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 fdaf 	bl	8009cce <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008192:	2181      	movs	r1, #129	; 0x81
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fdc0 	bl	8009d1a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 fea8 	bl	8009f0c <USBD_static_free>
    pdev->pClassData = NULL;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e0e8      	b.n	80083c6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d046      	beq.n	800828e <USBD_HID_Setup+0xbe>
 8008200:	2b20      	cmp	r3, #32
 8008202:	f040 80d8 	bne.w	80083b6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	3b02      	subs	r3, #2
 800820c:	2b09      	cmp	r3, #9
 800820e:	d836      	bhi.n	800827e <USBD_HID_Setup+0xae>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBD_HID_Setup+0x48>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	0800826f 	.word	0x0800826f
 800821c:	0800824f 	.word	0x0800824f
 8008220:	0800827f 	.word	0x0800827f
 8008224:	0800827f 	.word	0x0800827f
 8008228:	0800827f 	.word	0x0800827f
 800822c:	0800827f 	.word	0x0800827f
 8008230:	0800827f 	.word	0x0800827f
 8008234:	0800827f 	.word	0x0800827f
 8008238:	0800825d 	.word	0x0800825d
 800823c:	08008241 	.word	0x08008241
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	885b      	ldrh	r3, [r3, #2]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	461a      	mov	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	601a      	str	r2, [r3, #0]
          break;
 800824c:	e01e      	b.n	800828c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f9fa 	bl	800964e <USBD_CtlSendData>
          break;
 800825a:	e017      	b.n	800828c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	0a1b      	lsrs	r3, r3, #8
 8008262:	b29b      	uxth	r3, r3
 8008264:	b2db      	uxtb	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	605a      	str	r2, [r3, #4]
          break;
 800826c:	e00e      	b.n	800828c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3304      	adds	r3, #4
 8008272:	2201      	movs	r2, #1
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 f9e9 	bl	800964e <USBD_CtlSendData>
          break;
 800827c:	e006      	b.n	800828c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f973 	bl	800956c <USBD_CtlError>
          ret = USBD_FAIL;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
          break;
 800828a:	bf00      	nop
      }
      break;
 800828c:	e09a      	b.n	80083c4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	2b0b      	cmp	r3, #11
 8008294:	f200 8086 	bhi.w	80083a4 <USBD_HID_Setup+0x1d4>
 8008298:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <USBD_HID_Setup+0xd0>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082d1 	.word	0x080082d1
 80082a4:	080083b3 	.word	0x080083b3
 80082a8:	080083a5 	.word	0x080083a5
 80082ac:	080083a5 	.word	0x080083a5
 80082b0:	080083a5 	.word	0x080083a5
 80082b4:	080083a5 	.word	0x080083a5
 80082b8:	080082fb 	.word	0x080082fb
 80082bc:	080083a5 	.word	0x080083a5
 80082c0:	080083a5 	.word	0x080083a5
 80082c4:	080083a5 	.word	0x080083a5
 80082c8:	08008353 	.word	0x08008353
 80082cc:	0800837d 	.word	0x0800837d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d107      	bne.n	80082ec <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082dc:	f107 030a 	add.w	r3, r7, #10
 80082e0:	2202      	movs	r2, #2
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f9b2 	bl	800964e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082ea:	e063      	b.n	80083b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 f93c 	bl	800956c <USBD_CtlError>
            ret = USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	75fb      	strb	r3, [r7, #23]
          break;
 80082f8:	e05c      	b.n	80083b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	885b      	ldrh	r3, [r3, #2]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b22      	cmp	r3, #34	; 0x22
 8008304:	d108      	bne.n	8008318 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	88db      	ldrh	r3, [r3, #6]
 800830a:	2b4a      	cmp	r3, #74	; 0x4a
 800830c:	bf28      	it	cs
 800830e:	234a      	movcs	r3, #74	; 0x4a
 8008310:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008312:	4b2f      	ldr	r3, [pc, #188]	; (80083d0 <USBD_HID_Setup+0x200>)
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	e015      	b.n	8008344 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	0a1b      	lsrs	r3, r3, #8
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b21      	cmp	r3, #33	; 0x21
 8008322:	d108      	bne.n	8008336 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008324:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <USBD_HID_Setup+0x204>)
 8008326:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	88db      	ldrh	r3, [r3, #6]
 800832c:	2b09      	cmp	r3, #9
 800832e:	bf28      	it	cs
 8008330:	2309      	movcs	r3, #9
 8008332:	82bb      	strh	r3, [r7, #20]
 8008334:	e006      	b.n	8008344 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f917 	bl	800956c <USBD_CtlError>
            ret = USBD_FAIL;
 800833e:	2303      	movs	r3, #3
 8008340:	75fb      	strb	r3, [r7, #23]
            break;
 8008342:	e037      	b.n	80083b4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008344:	8abb      	ldrh	r3, [r7, #20]
 8008346:	461a      	mov	r2, r3
 8008348:	6939      	ldr	r1, [r7, #16]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 f97f 	bl	800964e <USBD_CtlSendData>
          break;
 8008350:	e030      	b.n	80083b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b03      	cmp	r3, #3
 800835c:	d107      	bne.n	800836e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3308      	adds	r3, #8
 8008362:	2201      	movs	r2, #1
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 f971 	bl	800964e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800836c:	e022      	b.n	80083b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 f8fb 	bl	800956c <USBD_CtlError>
            ret = USBD_FAIL;
 8008376:	2303      	movs	r3, #3
 8008378:	75fb      	strb	r3, [r7, #23]
          break;
 800837a:	e01b      	b.n	80083b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b03      	cmp	r3, #3
 8008386:	d106      	bne.n	8008396 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	885b      	ldrh	r3, [r3, #2]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008394:	e00e      	b.n	80083b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f8e7 	bl	800956c <USBD_CtlError>
            ret = USBD_FAIL;
 800839e:	2303      	movs	r3, #3
 80083a0:	75fb      	strb	r3, [r7, #23]
          break;
 80083a2:	e007      	b.n	80083b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f8e0 	bl	800956c <USBD_CtlError>
          ret = USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	75fb      	strb	r3, [r7, #23]
          break;
 80083b0:	e000      	b.n	80083b4 <USBD_HID_Setup+0x1e4>
          break;
 80083b2:	bf00      	nop
      }
      break;
 80083b4:	e006      	b.n	80083c4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 f8d7 	bl	800956c <USBD_CtlError>
      ret = USBD_FAIL;
 80083be:	2303      	movs	r3, #3
 80083c0:	75fb      	strb	r3, [r7, #23]
      break;
 80083c2:	bf00      	nop
  }

  return (uint8_t)ret;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	240000cc 	.word	0x240000cc
 80083d4:	240000b4 	.word	0x240000b4

080083d8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2222      	movs	r2, #34	; 0x22
 80083e4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80083e6:	4b03      	ldr	r3, [pc, #12]	; (80083f4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	24000048 	.word	0x24000048

080083f8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2222      	movs	r2, #34	; 0x22
 8008404:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008406:	4b03      	ldr	r3, [pc, #12]	; (8008414 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	2400006c 	.word	0x2400006c

08008418 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2222      	movs	r2, #34	; 0x22
 8008424:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008426:	4b03      	ldr	r3, [pc, #12]	; (8008434 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	24000090 	.word	0x24000090

08008438 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800844a:	2200      	movs	r2, #0
 800844c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	220a      	movs	r2, #10
 8008468:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800846a:	4b03      	ldr	r3, [pc, #12]	; (8008478 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	240000c0 	.word	0x240000c0

0800847c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	e01f      	b.n	80084d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	79fa      	ldrb	r2, [r7, #7]
 80084c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f001 fb8f 	bl	8009bec <USBD_LL_Init>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e016      	b.n	8008522 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	f107 020e 	add.w	r2, r7, #14
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	4602      	mov	r2, r0
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fbb0 	bl	8009c98 <USBD_LL_Start>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008564:	2303      	movs	r3, #3
 8008566:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	78fa      	ldrb	r2, [r7, #3]
 800857c:	4611      	mov	r1, r2
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	4798      	blx	r3
  }

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 ff90 	bl	80094f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085e6:	461a      	mov	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d01a      	beq.n	8008632 <USBD_LL_SetupStage+0x72>
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d822      	bhi.n	8008646 <USBD_LL_SetupStage+0x86>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <USBD_LL_SetupStage+0x4a>
 8008604:	2b01      	cmp	r3, #1
 8008606:	d00a      	beq.n	800861e <USBD_LL_SetupStage+0x5e>
 8008608:	e01d      	b.n	8008646 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa62 	bl	8008adc <USBD_StdDevReq>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
      break;
 800861c:	e020      	b.n	8008660 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fac6 	bl	8008bb8 <USBD_StdItfReq>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
      break;
 8008630:	e016      	b.n	8008660 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fb05 	bl	8008c4a <USBD_StdEPReq>
 8008640:	4603      	mov	r3, r0
 8008642:	73fb      	strb	r3, [r7, #15]
      break;
 8008644:	e00c      	b.n	8008660 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800864c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008650:	b2db      	uxtb	r3, r3
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fb7f 	bl	8009d58 <USBD_LL_StallEP>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
      break;
 800865e:	bf00      	nop
  }

  return ret;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b086      	sub	sp, #24
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	460b      	mov	r3, r1
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d138      	bne.n	80086f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008684:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800868c:	2b03      	cmp	r3, #3
 800868e:	d14a      	bne.n	8008726 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	429a      	cmp	r2, r3
 800869a:	d913      	bls.n	80086c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	1ad2      	subs	r2, r2, r3
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	68da      	ldr	r2, [r3, #12]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	4293      	cmp	r3, r2
 80086b4:	bf28      	it	cs
 80086b6:	4613      	movcs	r3, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 fff2 	bl	80096a6 <USBD_CtlContinueRx>
 80086c2:	e030      	b.n	8008726 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d10b      	bne.n	80086e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 ffed 	bl	80096c8 <USBD_CtlSendStatus>
 80086ee:	e01a      	b.n	8008726 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d114      	bne.n	8008726 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00e      	beq.n	8008726 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	7afa      	ldrb	r2, [r7, #11]
 8008712:	4611      	mov	r1, r2
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	4798      	blx	r3
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	e000      	b.n	8008728 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	460b      	mov	r3, r1
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d16b      	bne.n	800881c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3314      	adds	r3, #20
 8008748:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008750:	2b02      	cmp	r3, #2
 8008752:	d156      	bne.n	8008802 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	429a      	cmp	r2, r3
 800875e:	d914      	bls.n	800878a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	1ad2      	subs	r2, r2, r3
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	461a      	mov	r2, r3
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 ff84 	bl	8009684 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800877c:	2300      	movs	r3, #0
 800877e:	2200      	movs	r2, #0
 8008780:	2100      	movs	r1, #0
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f001 fb92 	bl	8009eac <USBD_LL_PrepareReceive>
 8008788:	e03b      	b.n	8008802 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	d11c      	bne.n	80087d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800879e:	429a      	cmp	r2, r3
 80087a0:	d316      	bcc.n	80087d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d20f      	bcs.n	80087d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087b0:	2200      	movs	r2, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 ff65 	bl	8009684 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087c2:	2300      	movs	r3, #0
 80087c4:	2200      	movs	r2, #0
 80087c6:	2100      	movs	r1, #0
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f001 fb6f 	bl	8009eac <USBD_LL_PrepareReceive>
 80087ce:	e018      	b.n	8008802 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d10b      	bne.n	80087f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087f4:	2180      	movs	r1, #128	; 0x80
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f001 faae 	bl	8009d58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 ff76 	bl	80096ee <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008808:	2b01      	cmp	r3, #1
 800880a:	d122      	bne.n	8008852 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f7ff fe98 	bl	8008542 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800881a:	e01a      	b.n	8008852 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b03      	cmp	r3, #3
 8008826:	d114      	bne.n	8008852 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00e      	beq.n	8008852 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	7afa      	ldrb	r2, [r7, #11]
 800883e:	4611      	mov	r1, r2
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	4798      	blx	r3
 8008844:	4603      	mov	r3, r0
 8008846:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	e000      	b.n	8008854 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800888c:	2303      	movs	r3, #3
 800888e:	e02f      	b.n	80088f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00f      	beq.n	80088ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d009      	beq.n	80088ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6852      	ldr	r2, [r2, #4]
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	4611      	mov	r1, r2
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088ba:	2340      	movs	r3, #64	; 0x40
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 fa04 	bl	8009cce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2240      	movs	r2, #64	; 0x40
 80088d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088d6:	2340      	movs	r3, #64	; 0x40
 80088d8:	2200      	movs	r2, #0
 80088da:	2180      	movs	r1, #128	; 0x80
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 f9f6 	bl	8009cce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2240      	movs	r2, #64	; 0x40
 80088ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008926:	b2da      	uxtb	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2204      	movs	r2, #4
 8008932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b04      	cmp	r3, #4
 8008956:	d106      	bne.n	8008966 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800895e:	b2da      	uxtb	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008986:	2303      	movs	r3, #3
 8008988:	e012      	b.n	80089b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b03      	cmp	r3, #3
 8008994:	d10b      	bne.n	80089ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e014      	b.n	80089fc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d10d      	bne.n	80089fa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d007      	beq.n	80089fa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	4611      	mov	r1, r2
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e014      	b.n	8008a48 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d10d      	bne.n	8008a46 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d007      	beq.n	8008a46 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	4611      	mov	r1, r2
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d009      	beq.n	8008a94 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6852      	ldr	r2, [r2, #4]
 8008a8c:	b2d2      	uxtb	r2, r2
 8008a8e:	4611      	mov	r1, r2
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
  }

  return USBD_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b087      	sub	sp, #28
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008abc:	8a3b      	ldrh	r3, [r7, #16]
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	b21a      	sxth	r2, r3
 8008ac2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	b21b      	sxth	r3, r3
 8008aca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008acc:	89fb      	ldrh	r3, [r7, #14]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
	...

08008adc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008af2:	2b40      	cmp	r3, #64	; 0x40
 8008af4:	d005      	beq.n	8008b02 <USBD_StdDevReq+0x26>
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d853      	bhi.n	8008ba2 <USBD_StdDevReq+0xc6>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <USBD_StdDevReq+0x3a>
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d14f      	bne.n	8008ba2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]
      break;
 8008b14:	e04a      	b.n	8008bac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b09      	cmp	r3, #9
 8008b1c:	d83b      	bhi.n	8008b96 <USBD_StdDevReq+0xba>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <USBD_StdDevReq+0x48>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b79 	.word	0x08008b79
 8008b28:	08008b8d 	.word	0x08008b8d
 8008b2c:	08008b97 	.word	0x08008b97
 8008b30:	08008b83 	.word	0x08008b83
 8008b34:	08008b97 	.word	0x08008b97
 8008b38:	08008b57 	.word	0x08008b57
 8008b3c:	08008b4d 	.word	0x08008b4d
 8008b40:	08008b97 	.word	0x08008b97
 8008b44:	08008b6f 	.word	0x08008b6f
 8008b48:	08008b61 	.word	0x08008b61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f9de 	bl	8008f10 <USBD_GetDescriptor>
          break;
 8008b54:	e024      	b.n	8008ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fb43 	bl	80091e4 <USBD_SetAddress>
          break;
 8008b5e:	e01f      	b.n	8008ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fb82 	bl	800926c <USBD_SetConfig>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b6c:	e018      	b.n	8008ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fc21 	bl	80093b8 <USBD_GetConfig>
          break;
 8008b76:	e013      	b.n	8008ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fc52 	bl	8009424 <USBD_GetStatus>
          break;
 8008b80:	e00e      	b.n	8008ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fc81 	bl	800948c <USBD_SetFeature>
          break;
 8008b8a:	e009      	b.n	8008ba0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fc90 	bl	80094b4 <USBD_ClrFeature>
          break;
 8008b94:	e004      	b.n	8008ba0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fce7 	bl	800956c <USBD_CtlError>
          break;
 8008b9e:	bf00      	nop
      }
      break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fce1 	bl	800956c <USBD_CtlError>
      break;
 8008baa:	bf00      	nop
  }

  return ret;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop

08008bb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d005      	beq.n	8008bde <USBD_StdItfReq+0x26>
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d82f      	bhi.n	8008c36 <USBD_StdItfReq+0x7e>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <USBD_StdItfReq+0x26>
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d12b      	bne.n	8008c36 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d81d      	bhi.n	8008c28 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	889b      	ldrh	r3, [r3, #4]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d813      	bhi.n	8008c1e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	4798      	blx	r3
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	88db      	ldrh	r3, [r3, #6]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d110      	bne.n	8008c32 <USBD_StdItfReq+0x7a>
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10d      	bne.n	8008c32 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fd56 	bl	80096c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c1c:	e009      	b.n	8008c32 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fca3 	bl	800956c <USBD_CtlError>
          break;
 8008c26:	e004      	b.n	8008c32 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc9e 	bl	800956c <USBD_CtlError>
          break;
 8008c30:	e000      	b.n	8008c34 <USBD_StdItfReq+0x7c>
          break;
 8008c32:	bf00      	nop
      }
      break;
 8008c34:	e004      	b.n	8008c40 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fc97 	bl	800956c <USBD_CtlError>
      break;
 8008c3e:	bf00      	nop
  }

  return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	889b      	ldrh	r3, [r3, #4]
 8008c5c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c66:	2b40      	cmp	r3, #64	; 0x40
 8008c68:	d007      	beq.n	8008c7a <USBD_StdEPReq+0x30>
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	f200 8145 	bhi.w	8008efa <USBD_StdEPReq+0x2b0>
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00c      	beq.n	8008c8e <USBD_StdEPReq+0x44>
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	f040 8140 	bne.w	8008efa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	4798      	blx	r3
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8c:	e13a      	b.n	8008f04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d007      	beq.n	8008ca6 <USBD_StdEPReq+0x5c>
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	f300 8129 	bgt.w	8008eee <USBD_StdEPReq+0x2a4>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d07f      	beq.n	8008da0 <USBD_StdEPReq+0x156>
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d03c      	beq.n	8008d1e <USBD_StdEPReq+0xd4>
 8008ca4:	e123      	b.n	8008eee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d002      	beq.n	8008cb8 <USBD_StdEPReq+0x6e>
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d016      	beq.n	8008ce4 <USBD_StdEPReq+0x9a>
 8008cb6:	e02c      	b.n	8008d12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00d      	beq.n	8008cda <USBD_StdEPReq+0x90>
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b80      	cmp	r3, #128	; 0x80
 8008cc2:	d00a      	beq.n	8008cda <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f845 	bl	8009d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cce:	2180      	movs	r1, #128	; 0x80
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f841 	bl	8009d58 <USBD_LL_StallEP>
 8008cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cd8:	e020      	b.n	8008d1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fc45 	bl	800956c <USBD_CtlError>
              break;
 8008ce2:	e01b      	b.n	8008d1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	885b      	ldrh	r3, [r3, #2]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10e      	bne.n	8008d0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <USBD_StdEPReq+0xc0>
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b80      	cmp	r3, #128	; 0x80
 8008cf6:	d008      	beq.n	8008d0a <USBD_StdEPReq+0xc0>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	88db      	ldrh	r3, [r3, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d104      	bne.n	8008d0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f827 	bl	8009d58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fcdc 	bl	80096c8 <USBD_CtlSendStatus>

              break;
 8008d10:	e004      	b.n	8008d1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc29 	bl	800956c <USBD_CtlError>
              break;
 8008d1a:	bf00      	nop
          }
          break;
 8008d1c:	e0ec      	b.n	8008ef8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d002      	beq.n	8008d30 <USBD_StdEPReq+0xe6>
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d016      	beq.n	8008d5c <USBD_StdEPReq+0x112>
 8008d2e:	e030      	b.n	8008d92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00d      	beq.n	8008d52 <USBD_StdEPReq+0x108>
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b80      	cmp	r3, #128	; 0x80
 8008d3a:	d00a      	beq.n	8008d52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f809 	bl	8009d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d46:	2180      	movs	r1, #128	; 0x80
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f805 	bl	8009d58 <USBD_LL_StallEP>
 8008d4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d50:	e025      	b.n	8008d9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fc09 	bl	800956c <USBD_CtlError>
              break;
 8008d5a:	e020      	b.n	8008d9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	885b      	ldrh	r3, [r3, #2]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d11b      	bne.n	8008d9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d004      	beq.n	8008d78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 f80f 	bl	8009d96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fca5 	bl	80096c8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d90:	e004      	b.n	8008d9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fbe9 	bl	800956c <USBD_CtlError>
              break;
 8008d9a:	e000      	b.n	8008d9e <USBD_StdEPReq+0x154>
              break;
 8008d9c:	bf00      	nop
          }
          break;
 8008d9e:	e0ab      	b.n	8008ef8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d002      	beq.n	8008db2 <USBD_StdEPReq+0x168>
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d032      	beq.n	8008e16 <USBD_StdEPReq+0x1cc>
 8008db0:	e097      	b.n	8008ee2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d007      	beq.n	8008dc8 <USBD_StdEPReq+0x17e>
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	2b80      	cmp	r3, #128	; 0x80
 8008dbc:	d004      	beq.n	8008dc8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fbd3 	bl	800956c <USBD_CtlError>
                break;
 8008dc6:	e091      	b.n	8008eec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da0b      	bge.n	8008de8 <USBD_StdEPReq+0x19e>
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	3310      	adds	r3, #16
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	3304      	adds	r3, #4
 8008de6:	e00b      	b.n	8008e00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3304      	adds	r3, #4
 8008e00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fc1d 	bl	800964e <USBD_CtlSendData>
              break;
 8008e14:	e06a      	b.n	8008eec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	da11      	bge.n	8008e42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	f003 020f 	and.w	r2, r3, #15
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	3324      	adds	r3, #36	; 0x24
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d117      	bne.n	8008e68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fb96 	bl	800956c <USBD_CtlError>
                  break;
 8008e40:	e054      	b.n	8008eec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	f003 020f 	and.w	r2, r3, #15
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	440b      	add	r3, r1
 8008e54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d104      	bne.n	8008e68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fb83 	bl	800956c <USBD_CtlError>
                  break;
 8008e66:	e041      	b.n	8008eec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	da0b      	bge.n	8008e88 <USBD_StdEPReq+0x23e>
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	3310      	adds	r3, #16
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4413      	add	r3, r2
 8008e84:	3304      	adds	r3, #4
 8008e86:	e00b      	b.n	8008ea0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <USBD_StdEPReq+0x264>
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	2b80      	cmp	r3, #128	; 0x80
 8008eac:	d103      	bne.n	8008eb6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	e00e      	b.n	8008ed4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 ff8a 	bl	8009dd4 <USBD_LL_IsStallEP>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	e002      	b.n	8008ed4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fbb7 	bl	800964e <USBD_CtlSendData>
              break;
 8008ee0:	e004      	b.n	8008eec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb41 	bl	800956c <USBD_CtlError>
              break;
 8008eea:	bf00      	nop
          }
          break;
 8008eec:	e004      	b.n	8008ef8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fb3b 	bl	800956c <USBD_CtlError>
          break;
 8008ef6:	bf00      	nop
      }
      break;
 8008ef8:	e004      	b.n	8008f04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fb35 	bl	800956c <USBD_CtlError>
      break;
 8008f02:	bf00      	nop
  }

  return ret;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	885b      	ldrh	r3, [r3, #2]
 8008f2a:	0a1b      	lsrs	r3, r3, #8
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	2b06      	cmp	r3, #6
 8008f32:	f200 8128 	bhi.w	8009186 <USBD_GetDescriptor+0x276>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <USBD_GetDescriptor+0x2c>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	08008f71 	.word	0x08008f71
 8008f44:	08008fb1 	.word	0x08008fb1
 8008f48:	08009187 	.word	0x08009187
 8008f4c:	08009187 	.word	0x08009187
 8008f50:	08009127 	.word	0x08009127
 8008f54:	08009153 	.word	0x08009153
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
      break;
 8008f6e:	e112      	b.n	8009196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7c1b      	ldrb	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10d      	bne.n	8008f94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f80:	f107 0208 	add.w	r2, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	2202      	movs	r2, #2
 8008f90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f92:	e100      	b.n	8009196 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	f107 0208 	add.w	r2, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	2202      	movs	r2, #2
 8008fac:	701a      	strb	r2, [r3, #0]
      break;
 8008fae:	e0f2      	b.n	8009196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	885b      	ldrh	r3, [r3, #2]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	f200 80ac 	bhi.w	8009114 <USBD_GetDescriptor+0x204>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBD_GetDescriptor+0xb4>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008fdd 	.word	0x08008fdd
 8008fc8:	08009011 	.word	0x08009011
 8008fcc:	08009045 	.word	0x08009045
 8008fd0:	08009079 	.word	0x08009079
 8008fd4:	080090ad 	.word	0x080090ad
 8008fd8:	080090e1 	.word	0x080090e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	7c12      	ldrb	r2, [r2, #16]
 8008ff4:	f107 0108 	add.w	r1, r7, #8
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ffe:	e091      	b.n	8009124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fab2 	bl	800956c <USBD_CtlError>
            err++;
 8009008:	7afb      	ldrb	r3, [r7, #11]
 800900a:	3301      	adds	r3, #1
 800900c:	72fb      	strb	r3, [r7, #11]
          break;
 800900e:	e089      	b.n	8009124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00b      	beq.n	8009034 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	7c12      	ldrb	r2, [r2, #16]
 8009028:	f107 0108 	add.w	r1, r7, #8
 800902c:	4610      	mov	r0, r2
 800902e:	4798      	blx	r3
 8009030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009032:	e077      	b.n	8009124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa98 	bl	800956c <USBD_CtlError>
            err++;
 800903c:	7afb      	ldrb	r3, [r7, #11]
 800903e:	3301      	adds	r3, #1
 8009040:	72fb      	strb	r3, [r7, #11]
          break;
 8009042:	e06f      	b.n	8009124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	7c12      	ldrb	r2, [r2, #16]
 800905c:	f107 0108 	add.w	r1, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009066:	e05d      	b.n	8009124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa7e 	bl	800956c <USBD_CtlError>
            err++;
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	3301      	adds	r3, #1
 8009074:	72fb      	strb	r3, [r7, #11]
          break;
 8009076:	e055      	b.n	8009124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	7c12      	ldrb	r2, [r2, #16]
 8009090:	f107 0108 	add.w	r1, r7, #8
 8009094:	4610      	mov	r0, r2
 8009096:	4798      	blx	r3
 8009098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800909a:	e043      	b.n	8009124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa64 	bl	800956c <USBD_CtlError>
            err++;
 80090a4:	7afb      	ldrb	r3, [r7, #11]
 80090a6:	3301      	adds	r3, #1
 80090a8:	72fb      	strb	r3, [r7, #11]
          break;
 80090aa:	e03b      	b.n	8009124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	7c12      	ldrb	r2, [r2, #16]
 80090c4:	f107 0108 	add.w	r1, r7, #8
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ce:	e029      	b.n	8009124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa4a 	bl	800956c <USBD_CtlError>
            err++;
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	3301      	adds	r3, #1
 80090dc:	72fb      	strb	r3, [r7, #11]
          break;
 80090de:	e021      	b.n	8009124 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009102:	e00f      	b.n	8009124 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa30 	bl	800956c <USBD_CtlError>
            err++;
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	3301      	adds	r3, #1
 8009110:	72fb      	strb	r3, [r7, #11]
          break;
 8009112:	e007      	b.n	8009124 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa28 	bl	800956c <USBD_CtlError>
          err++;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	3301      	adds	r3, #1
 8009120:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009122:	bf00      	nop
      }
      break;
 8009124:	e037      	b.n	8009196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7c1b      	ldrb	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009136:	f107 0208 	add.w	r2, r7, #8
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3
 800913e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009140:	e029      	b.n	8009196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa11 	bl	800956c <USBD_CtlError>
        err++;
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	3301      	adds	r3, #1
 800914e:	72fb      	strb	r3, [r7, #11]
      break;
 8009150:	e021      	b.n	8009196 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7c1b      	ldrb	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10d      	bne.n	8009176 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	f107 0208 	add.w	r2, r7, #8
 8009166:	4610      	mov	r0, r2
 8009168:	4798      	blx	r3
 800916a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3301      	adds	r3, #1
 8009170:	2207      	movs	r2, #7
 8009172:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009174:	e00f      	b.n	8009196 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f9f7 	bl	800956c <USBD_CtlError>
        err++;
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	3301      	adds	r3, #1
 8009182:	72fb      	strb	r3, [r7, #11]
      break;
 8009184:	e007      	b.n	8009196 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f9ef 	bl	800956c <USBD_CtlError>
      err++;
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	3301      	adds	r3, #1
 8009192:	72fb      	strb	r3, [r7, #11]
      break;
 8009194:	bf00      	nop
  }

  if (err != 0U)
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d11e      	bne.n	80091da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	88db      	ldrh	r3, [r3, #6]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d016      	beq.n	80091d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80091a4:	893b      	ldrh	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00e      	beq.n	80091c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88da      	ldrh	r2, [r3, #6]
 80091ae:	893b      	ldrh	r3, [r7, #8]
 80091b0:	4293      	cmp	r3, r2
 80091b2:	bf28      	it	cs
 80091b4:	4613      	movcs	r3, r2
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091ba:	893b      	ldrh	r3, [r7, #8]
 80091bc:	461a      	mov	r2, r3
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa44 	bl	800964e <USBD_CtlSendData>
 80091c6:	e009      	b.n	80091dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f9ce 	bl	800956c <USBD_CtlError>
 80091d0:	e004      	b.n	80091dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fa78 	bl	80096c8 <USBD_CtlSendStatus>
 80091d8:	e000      	b.n	80091dc <USBD_GetDescriptor+0x2cc>
    return;
 80091da:	bf00      	nop
  }
}
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop

080091e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	889b      	ldrh	r3, [r3, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d131      	bne.n	800925a <USBD_SetAddress+0x76>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d12d      	bne.n	800925a <USBD_SetAddress+0x76>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	2b7f      	cmp	r3, #127	; 0x7f
 8009204:	d829      	bhi.n	800925a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	885b      	ldrh	r3, [r3, #2]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009210:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b03      	cmp	r3, #3
 800921c:	d104      	bne.n	8009228 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9a3 	bl	800956c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009226:	e01d      	b.n	8009264 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fdf9 	bl	8009e2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fa44 	bl	80096c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924e:	e009      	b.n	8009264 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009258:	e004      	b.n	8009264 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f985 	bl	800956c <USBD_CtlError>
  }
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	885b      	ldrh	r3, [r3, #2]
 800927e:	b2da      	uxtb	r2, r3
 8009280:	4b4c      	ldr	r3, [pc, #304]	; (80093b4 <USBD_SetConfig+0x148>)
 8009282:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009284:	4b4b      	ldr	r3, [pc, #300]	; (80093b4 <USBD_SetConfig+0x148>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d905      	bls.n	8009298 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f96c 	bl	800956c <USBD_CtlError>
    return USBD_FAIL;
 8009294:	2303      	movs	r3, #3
 8009296:	e088      	b.n	80093aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d002      	beq.n	80092aa <USBD_SetConfig+0x3e>
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d025      	beq.n	80092f4 <USBD_SetConfig+0x88>
 80092a8:	e071      	b.n	800938e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092aa:	4b42      	ldr	r3, [pc, #264]	; (80093b4 <USBD_SetConfig+0x148>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d01c      	beq.n	80092ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80092b2:	4b40      	ldr	r3, [pc, #256]	; (80093b4 <USBD_SetConfig+0x148>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092bc:	4b3d      	ldr	r3, [pc, #244]	; (80093b4 <USBD_SetConfig+0x148>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff f948 	bl	8008558 <USBD_SetClassConfig>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d004      	beq.n	80092dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f949 	bl	800956c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092da:	e065      	b.n	80093a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f9f3 	bl	80096c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2203      	movs	r2, #3
 80092e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092ea:	e05d      	b.n	80093a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9eb 	bl	80096c8 <USBD_CtlSendStatus>
      break;
 80092f2:	e059      	b.n	80093a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092f4:	4b2f      	ldr	r3, [pc, #188]	; (80093b4 <USBD_SetConfig+0x148>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d112      	bne.n	8009322 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009304:	4b2b      	ldr	r3, [pc, #172]	; (80093b4 <USBD_SetConfig+0x148>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800930e:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <USBD_SetConfig+0x148>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff f93b 	bl	8008590 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9d4 	bl	80096c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009320:	e042      	b.n	80093a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009322:	4b24      	ldr	r3, [pc, #144]	; (80093b4 <USBD_SetConfig+0x148>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d02a      	beq.n	8009386 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff f929 	bl	8008590 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800933e:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <USBD_SetConfig+0x148>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009348:	4b1a      	ldr	r3, [pc, #104]	; (80093b4 <USBD_SetConfig+0x148>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff f902 	bl	8008558 <USBD_SetClassConfig>
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00f      	beq.n	800937e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f903 	bl	800956c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff f90e 	bl	8008590 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800937c:	e014      	b.n	80093a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f9a2 	bl	80096c8 <USBD_CtlSendStatus>
      break;
 8009384:	e010      	b.n	80093a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f99e 	bl	80096c8 <USBD_CtlSendStatus>
      break;
 800938c:	e00c      	b.n	80093a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f8eb 	bl	800956c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009396:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <USBD_SetConfig+0x148>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff f8f7 	bl	8008590 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	73fb      	strb	r3, [r7, #15]
      break;
 80093a6:	bf00      	nop
  }

  return ret;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	2400024a 	.word	0x2400024a

080093b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	88db      	ldrh	r3, [r3, #6]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d004      	beq.n	80093d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f8cd 	bl	800956c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093d2:	e023      	b.n	800941c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	dc02      	bgt.n	80093e6 <USBD_GetConfig+0x2e>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dc03      	bgt.n	80093ec <USBD_GetConfig+0x34>
 80093e4:	e015      	b.n	8009412 <USBD_GetConfig+0x5a>
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d00b      	beq.n	8009402 <USBD_GetConfig+0x4a>
 80093ea:	e012      	b.n	8009412 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3308      	adds	r3, #8
 80093f6:	2201      	movs	r2, #1
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f927 	bl	800964e <USBD_CtlSendData>
        break;
 8009400:	e00c      	b.n	800941c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3304      	adds	r3, #4
 8009406:	2201      	movs	r2, #1
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f91f 	bl	800964e <USBD_CtlSendData>
        break;
 8009410:	e004      	b.n	800941c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f8a9 	bl	800956c <USBD_CtlError>
        break;
 800941a:	bf00      	nop
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009434:	b2db      	uxtb	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	2b02      	cmp	r3, #2
 800943a:	d81e      	bhi.n	800947a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	88db      	ldrh	r3, [r3, #6]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d004      	beq.n	800944e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f890 	bl	800956c <USBD_CtlError>
        break;
 800944c:	e01a      	b.n	8009484 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f043 0202 	orr.w	r2, r3, #2
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	330c      	adds	r3, #12
 800946e:	2202      	movs	r2, #2
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f8eb 	bl	800964e <USBD_CtlSendData>
      break;
 8009478:	e004      	b.n	8009484 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f875 	bl	800956c <USBD_CtlError>
      break;
 8009482:	bf00      	nop
  }
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	885b      	ldrh	r3, [r3, #2]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d106      	bne.n	80094ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f90e 	bl	80096c8 <USBD_CtlSendStatus>
  }
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d80b      	bhi.n	80094e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	885b      	ldrh	r3, [r3, #2]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d10c      	bne.n	80094ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f8f3 	bl	80096c8 <USBD_CtlSendStatus>
      }
      break;
 80094e2:	e004      	b.n	80094ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f840 	bl	800956c <USBD_CtlError>
      break;
 80094ec:	e000      	b.n	80094f0 <USBD_ClrFeature+0x3c>
      break;
 80094ee:	bf00      	nop
  }
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	781a      	ldrb	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7ff fabb 	bl	8008a9e <SWAPBYTE>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3301      	adds	r3, #1
 8009534:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff faae 	bl	8008a9e <SWAPBYTE>
 8009542:	4603      	mov	r3, r0
 8009544:	461a      	mov	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3301      	adds	r3, #1
 800954e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3301      	adds	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f7ff faa1 	bl	8008a9e <SWAPBYTE>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	80da      	strh	r2, [r3, #6]
}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009576:	2180      	movs	r1, #128	; 0x80
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fbed 	bl	8009d58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fbe9 	bl	8009d58 <USBD_LL_StallEP>
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b086      	sub	sp, #24
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d036      	beq.n	8009612 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095a8:	6938      	ldr	r0, [r7, #16]
 80095aa:	f000 f836 	bl	800961a <USBD_GetLen>
 80095ae:	4603      	mov	r3, r0
 80095b0:	3301      	adds	r3, #1
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	4413      	add	r3, r2
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	7812      	ldrb	r2, [r2, #0]
 80095c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	3301      	adds	r3, #1
 80095cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	4413      	add	r3, r2
 80095d4:	2203      	movs	r2, #3
 80095d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	3301      	adds	r3, #1
 80095dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095de:	e013      	b.n	8009608 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	4413      	add	r3, r2
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	7812      	ldrb	r2, [r2, #0]
 80095ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	3301      	adds	r3, #1
 80095f0:	613b      	str	r3, [r7, #16]
    idx++;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	3301      	adds	r3, #1
 80095f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
    idx++;
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	3301      	adds	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e7      	bne.n	80095e0 <USBD_GetString+0x52>
 8009610:	e000      	b.n	8009614 <USBD_GetString+0x86>
    return;
 8009612:	bf00      	nop
  }
}
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800962a:	e005      	b.n	8009638 <USBD_GetLen+0x1e>
  {
    len++;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	3301      	adds	r3, #1
 8009630:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	3301      	adds	r3, #1
 8009636:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f5      	bne.n	800962c <USBD_GetLen+0x12>
  }

  return len;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2202      	movs	r2, #2
 800965e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	2100      	movs	r1, #0
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fbf8 	bl	8009e6a <USBD_LL_Transmit>

  return USBD_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	2100      	movs	r1, #0
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fbe7 	bl	8009e6a <USBD_LL_Transmit>

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	2100      	movs	r1, #0
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fbf7 	bl	8009eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2204      	movs	r2, #4
 80096d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096d8:	2300      	movs	r3, #0
 80096da:	2200      	movs	r2, #0
 80096dc:	2100      	movs	r1, #0
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fbc3 	bl	8009e6a <USBD_LL_Transmit>

  return USBD_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2205      	movs	r2, #5
 80096fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096fe:	2300      	movs	r3, #0
 8009700:	2200      	movs	r2, #0
 8009702:	2100      	movs	r1, #0
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fbd1 	bl	8009eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009718:	2201      	movs	r2, #1
 800971a:	490f      	ldr	r1, [pc, #60]	; (8009758 <MX_USB_DEVICE_Init+0x44>)
 800971c:	480f      	ldr	r0, [pc, #60]	; (800975c <MX_USB_DEVICE_Init+0x48>)
 800971e:	f7fe fead 	bl	800847c <USBD_Init>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009728:	f7f7 f916 	bl	8000958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800972c:	490c      	ldr	r1, [pc, #48]	; (8009760 <MX_USB_DEVICE_Init+0x4c>)
 800972e:	480b      	ldr	r0, [pc, #44]	; (800975c <MX_USB_DEVICE_Init+0x48>)
 8009730:	f7fe fed4 	bl	80084dc <USBD_RegisterClass>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800973a:	f7f7 f90d 	bl	8000958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800973e:	4807      	ldr	r0, [pc, #28]	; (800975c <MX_USB_DEVICE_Init+0x48>)
 8009740:	f7fe fef3 	bl	800852a <USBD_Start>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800974a:	f7f7 f905 	bl	8000958 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800974e:	f7f9 fe11 	bl	8003374 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009752:	bf00      	nop
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	24000118 	.word	0x24000118
 800975c:	240003fc 	.word	0x240003fc
 8009760:	24000010 	.word	0x24000010

08009764 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2212      	movs	r2, #18
 8009774:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009776:	4b03      	ldr	r3, [pc, #12]	; (8009784 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	24000134 	.word	0x24000134

08009788 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	6039      	str	r1, [r7, #0]
 8009792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2204      	movs	r2, #4
 8009798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800979a:	4b03      	ldr	r3, [pc, #12]	; (80097a8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	24000148 	.word	0x24000148

080097ac <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	4907      	ldr	r1, [pc, #28]	; (80097e0 <USBD_HS_ProductStrDescriptor+0x34>)
 80097c2:	4808      	ldr	r0, [pc, #32]	; (80097e4 <USBD_HS_ProductStrDescriptor+0x38>)
 80097c4:	f7ff fee3 	bl	800958e <USBD_GetString>
 80097c8:	e004      	b.n	80097d4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4904      	ldr	r1, [pc, #16]	; (80097e0 <USBD_HS_ProductStrDescriptor+0x34>)
 80097ce:	4805      	ldr	r0, [pc, #20]	; (80097e4 <USBD_HS_ProductStrDescriptor+0x38>)
 80097d0:	f7ff fedd 	bl	800958e <USBD_GetString>
  }
  return USBD_StrDesc;
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	240006cc 	.word	0x240006cc
 80097e4:	08009fe8 	.word	0x08009fe8

080097e8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	6039      	str	r1, [r7, #0]
 80097f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	4904      	ldr	r1, [pc, #16]	; (8009808 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80097f8:	4804      	ldr	r0, [pc, #16]	; (800980c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80097fa:	f7ff fec8 	bl	800958e <USBD_GetString>
  return USBD_StrDesc;
 80097fe:	4b02      	ldr	r3, [pc, #8]	; (8009808 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	240006cc 	.word	0x240006cc
 800980c:	0800a000 	.word	0x0800a000

08009810 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	221a      	movs	r2, #26
 8009820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009822:	f000 f843 	bl	80098ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009826:	4b02      	ldr	r3, [pc, #8]	; (8009830 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	2400014c 	.word	0x2400014c

08009834 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4907      	ldr	r1, [pc, #28]	; (8009868 <USBD_HS_ConfigStrDescriptor+0x34>)
 800984a:	4808      	ldr	r0, [pc, #32]	; (800986c <USBD_HS_ConfigStrDescriptor+0x38>)
 800984c:	f7ff fe9f 	bl	800958e <USBD_GetString>
 8009850:	e004      	b.n	800985c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4904      	ldr	r1, [pc, #16]	; (8009868 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009856:	4805      	ldr	r0, [pc, #20]	; (800986c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009858:	f7ff fe99 	bl	800958e <USBD_GetString>
  }
  return USBD_StrDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	; (8009868 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	240006cc 	.word	0x240006cc
 800986c:	0800a014 	.word	0x0800a014

08009870 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d105      	bne.n	800988e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	4907      	ldr	r1, [pc, #28]	; (80098a4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009886:	4808      	ldr	r0, [pc, #32]	; (80098a8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009888:	f7ff fe81 	bl	800958e <USBD_GetString>
 800988c:	e004      	b.n	8009898 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	4904      	ldr	r1, [pc, #16]	; (80098a4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009892:	4805      	ldr	r0, [pc, #20]	; (80098a8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009894:	f7ff fe7b 	bl	800958e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009898:	4b02      	ldr	r3, [pc, #8]	; (80098a4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	240006cc 	.word	0x240006cc
 80098a8:	0800a020 	.word	0x0800a020

080098ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098b2:	4b0f      	ldr	r3, [pc, #60]	; (80098f0 <Get_SerialNum+0x44>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098b8:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <Get_SerialNum+0x48>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098be:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <Get_SerialNum+0x4c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4413      	add	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098d2:	2208      	movs	r2, #8
 80098d4:	4909      	ldr	r1, [pc, #36]	; (80098fc <Get_SerialNum+0x50>)
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f814 	bl	8009904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098dc:	2204      	movs	r2, #4
 80098de:	4908      	ldr	r1, [pc, #32]	; (8009900 <Get_SerialNum+0x54>)
 80098e0:	68b8      	ldr	r0, [r7, #8]
 80098e2:	f000 f80f 	bl	8009904 <IntToUnicode>
  }
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	1ff1e800 	.word	0x1ff1e800
 80098f4:	1ff1e804 	.word	0x1ff1e804
 80098f8:	1ff1e808 	.word	0x1ff1e808
 80098fc:	2400014e 	.word	0x2400014e
 8009900:	2400015e 	.word	0x2400015e

08009904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	4613      	mov	r3, r2
 8009910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009916:	2300      	movs	r3, #0
 8009918:	75fb      	strb	r3, [r7, #23]
 800991a:	e027      	b.n	800996c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	0f1b      	lsrs	r3, r3, #28
 8009920:	2b09      	cmp	r3, #9
 8009922:	d80b      	bhi.n	800993c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	0f1b      	lsrs	r3, r3, #28
 8009928:	b2da      	uxtb	r2, r3
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4619      	mov	r1, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	440b      	add	r3, r1
 8009934:	3230      	adds	r2, #48	; 0x30
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e00a      	b.n	8009952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	0f1b      	lsrs	r3, r3, #28
 8009940:	b2da      	uxtb	r2, r3
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	4619      	mov	r1, r3
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	440b      	add	r3, r1
 800994c:	3237      	adds	r2, #55	; 0x37
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	011b      	lsls	r3, r3, #4
 8009956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	3301      	adds	r3, #1
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	3301      	adds	r3, #1
 800996a:	75fb      	strb	r3, [r7, #23]
 800996c:	7dfa      	ldrb	r2, [r7, #23]
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	429a      	cmp	r2, r3
 8009972:	d3d3      	bcc.n	800991c <IntToUnicode+0x18>
  }
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b0b0      	sub	sp, #192	; 0xc0
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800998c:	f107 030c 	add.w	r3, r7, #12
 8009990:	22b4      	movs	r2, #180	; 0xb4
 8009992:	2100      	movs	r1, #0
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fb13 	bl	8009fc0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a18      	ldr	r2, [pc, #96]	; (8009a00 <HAL_PCD_MspInit+0x7c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d129      	bne.n	80099f8 <HAL_PCD_MspInit+0x74>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80099a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80099aa:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80099ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80099b2:	f107 030c 	add.w	r3, r7, #12
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fa fc06 	bl	80041c8 <HAL_RCCEx_PeriphCLKConfig>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 80099c2:	f7f6 ffc9 	bl	8000958 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80099c6:	f7f9 fcd5 	bl	8003374 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80099ca:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <HAL_PCD_MspInit+0x80>)
 80099cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80099d0:	4a0c      	ldr	r2, [pc, #48]	; (8009a04 <HAL_PCD_MspInit+0x80>)
 80099d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80099d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80099da:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <HAL_PCD_MspInit+0x80>)
 80099dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80099e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80099e8:	2200      	movs	r2, #0
 80099ea:	2100      	movs	r1, #0
 80099ec:	204d      	movs	r0, #77	; 0x4d
 80099ee:	f7f7 fbca 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80099f2:	204d      	movs	r0, #77	; 0x4d
 80099f4:	f7f7 fbe1 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80099f8:	bf00      	nop
 80099fa:	37c0      	adds	r7, #192	; 0xc0
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	40040000 	.word	0x40040000
 8009a04:	58024400 	.word	0x58024400

08009a08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7fe fdce 	bl	80085c0 <USBD_LL_SetupStage>
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a3e:	78fa      	ldrb	r2, [r7, #3]
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	4613      	mov	r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	4619      	mov	r1, r3
 8009a56:	f7fe fe08 	bl	800866a <USBD_LL_DataOutStage>
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	440b      	add	r3, r1
 8009a82:	3348      	adds	r3, #72	; 0x48
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f7fe fe51 	bl	8008730 <USBD_LL_DataInStage>
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe ff65 	bl	8008974 <USBD_LL_SOF>
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aba:	2301      	movs	r3, #1
 8009abc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d102      	bne.n	8009acc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]
 8009aca:	e008      	b.n	8009ade <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d102      	bne.n	8009ada <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
 8009ad8:	e001      	b.n	8009ade <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ada:	f7f6 ff3d 	bl	8000958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ae4:	7bfa      	ldrb	r2, [r7, #15]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe ff05 	bl	80088f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fe feb1 	bl	800885c <USBD_LL_Reset>
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe ff00 	bl	8008918 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6812      	ldr	r2, [r2, #0]
 8009b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b2a:	f043 0301 	orr.w	r3, r3, #1
 8009b2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <HAL_PCD_SuspendCallback+0x48>)
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	4a03      	ldr	r2, [pc, #12]	; (8009b4c <HAL_PCD_SuspendCallback+0x48>)
 8009b3e:	f043 0306 	orr.w	r3, r3, #6
 8009b42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	e000ed00 	.word	0xe000ed00

08009b50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fef0 	bl	8008944 <USBD_LL_Resume>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe ff3e 	bl	8008a04 <USBD_LL_IsoOUTIncomplete>
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe ff06 	bl	80089b8 <USBD_LL_IsoINIncomplete>
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe ff44 	bl	8008a50 <USBD_LL_DevConnected>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe ff41 	bl	8008a66 <USBD_LL_DevDisconnected>
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d143      	bne.n	8009c84 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009bfc:	4a24      	ldr	r2, [pc, #144]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a22      	ldr	r2, [pc, #136]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009c0c:	4b20      	ldr	r3, [pc, #128]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c0e:	4a21      	ldr	r2, [pc, #132]	; (8009c94 <USBD_LL_Init+0xa8>)
 8009c10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8009c12:	4b1f      	ldr	r3, [pc, #124]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c14:	2209      	movs	r2, #9
 8009c16:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009c18:	4b1d      	ldr	r3, [pc, #116]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009c1e:	4b1c      	ldr	r3, [pc, #112]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009c24:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c26:	2202      	movs	r2, #2
 8009c28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009c2a:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009c30:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009c36:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 8009c3c:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009c42:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009c48:	4b11      	ldr	r3, [pc, #68]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009c4e:	4b10      	ldr	r3, [pc, #64]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009c54:	480e      	ldr	r0, [pc, #56]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c56:	f7f8 f9ca 	bl	8001fee <HAL_PCD_Init>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 8009c60:	f7f6 fe7a 	bl	8000958 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c68:	4809      	ldr	r0, [pc, #36]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c6a:	f7f9 fb42 	bl	80032f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009c6e:	2280      	movs	r2, #128	; 0x80
 8009c70:	2100      	movs	r1, #0
 8009c72:	4807      	ldr	r0, [pc, #28]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c74:	f7f9 faf6 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009c78:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	4804      	ldr	r0, [pc, #16]	; (8009c90 <USBD_LL_Init+0xa4>)
 8009c80:	f7f9 faf0 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	240008cc 	.word	0x240008cc
 8009c94:	40040000 	.word	0x40040000

08009c98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f8 fac1 	bl	8002236 <HAL_PCD_Start>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f930 	bl	8009f20 <USBD_Get_USB_Status>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	461a      	mov	r2, r3
 8009cdc:	4603      	mov	r3, r0
 8009cde:	70fb      	strb	r3, [r7, #3]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70bb      	strb	r3, [r7, #2]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cf6:	78bb      	ldrb	r3, [r7, #2]
 8009cf8:	883a      	ldrh	r2, [r7, #0]
 8009cfa:	78f9      	ldrb	r1, [r7, #3]
 8009cfc:	f7f8 fed2 	bl	8002aa4 <HAL_PCD_EP_Open>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f90a 	bl	8009f20 <USBD_Get_USB_Status>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7f8 ff1b 	bl	8002b74 <HAL_PCD_EP_Close>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f8eb 	bl	8009f20 <USBD_Get_USB_Status>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f8 ffdb 	bl	8002d32 <HAL_PCD_EP_SetStall>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 f8cc 	bl	8009f20 <USBD_Get_USB_Status>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f9 f820 	bl	8002dfa <HAL_PCD_EP_ClrStall>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f8ad 	bl	8009f20 <USBD_Get_USB_Status>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009de6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da0b      	bge.n	8009e08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009df6:	68f9      	ldr	r1, [r7, #12]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	333e      	adds	r3, #62	; 0x3e
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	e00b      	b.n	8009e20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	4613      	mov	r3, r2
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	4611      	mov	r1, r2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7f8 fe05 	bl	8002a5a <HAL_PCD_SetAddress>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 f862 	bl	8009f20 <USBD_Get_USB_Status>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
 8009e76:	460b      	mov	r3, r1
 8009e78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e88:	7af9      	ldrb	r1, [r7, #11]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	f7f8 ff06 	bl	8002c9e <HAL_PCD_EP_Transmit>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f841 	bl	8009f20 <USBD_Get_USB_Status>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ea2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009eca:	7af9      	ldrb	r1, [r7, #11]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	f7f8 fe9a 	bl	8002c08 <HAL_PCD_EP_Receive>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 f820 	bl	8009f20 <USBD_Get_USB_Status>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ee4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ef8:	4b03      	ldr	r3, [pc, #12]	; (8009f08 <USBD_static_malloc+0x18>)
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	2400024c 	.word	0x2400024c

08009f0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]

}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f2e:	79fb      	ldrb	r3, [r7, #7]
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d817      	bhi.n	8009f64 <USBD_Get_USB_Status+0x44>
 8009f34:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <USBD_Get_USB_Status+0x1c>)
 8009f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3a:	bf00      	nop
 8009f3c:	08009f4d 	.word	0x08009f4d
 8009f40:	08009f53 	.word	0x08009f53
 8009f44:	08009f59 	.word	0x08009f59
 8009f48:	08009f5f 	.word	0x08009f5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f50:	e00b      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f52:	2303      	movs	r3, #3
 8009f54:	73fb      	strb	r3, [r7, #15]
    break;
 8009f56:	e008      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f5c:	e005      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	73fb      	strb	r3, [r7, #15]
    break;
 8009f62:	e002      	b.n	8009f6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	73fb      	strb	r3, [r7, #15]
    break;
 8009f68:	bf00      	nop
  }
  return usb_status;
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <__libc_init_array>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	4d0d      	ldr	r5, [pc, #52]	; (8009fb0 <__libc_init_array+0x38>)
 8009f7c:	4c0d      	ldr	r4, [pc, #52]	; (8009fb4 <__libc_init_array+0x3c>)
 8009f7e:	1b64      	subs	r4, r4, r5
 8009f80:	10a4      	asrs	r4, r4, #2
 8009f82:	2600      	movs	r6, #0
 8009f84:	42a6      	cmp	r6, r4
 8009f86:	d109      	bne.n	8009f9c <__libc_init_array+0x24>
 8009f88:	4d0b      	ldr	r5, [pc, #44]	; (8009fb8 <__libc_init_array+0x40>)
 8009f8a:	4c0c      	ldr	r4, [pc, #48]	; (8009fbc <__libc_init_array+0x44>)
 8009f8c:	f000 f820 	bl	8009fd0 <_init>
 8009f90:	1b64      	subs	r4, r4, r5
 8009f92:	10a4      	asrs	r4, r4, #2
 8009f94:	2600      	movs	r6, #0
 8009f96:	42a6      	cmp	r6, r4
 8009f98:	d105      	bne.n	8009fa6 <__libc_init_array+0x2e>
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa0:	4798      	blx	r3
 8009fa2:	3601      	adds	r6, #1
 8009fa4:	e7ee      	b.n	8009f84 <__libc_init_array+0xc>
 8009fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009faa:	4798      	blx	r3
 8009fac:	3601      	adds	r6, #1
 8009fae:	e7f2      	b.n	8009f96 <__libc_init_array+0x1e>
 8009fb0:	0800a070 	.word	0x0800a070
 8009fb4:	0800a070 	.word	0x0800a070
 8009fb8:	0800a070 	.word	0x0800a070
 8009fbc:	0800a074 	.word	0x0800a074

08009fc0 <memset>:
 8009fc0:	4402      	add	r2, r0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d100      	bne.n	8009fca <memset+0xa>
 8009fc8:	4770      	bx	lr
 8009fca:	f803 1b01 	strb.w	r1, [r3], #1
 8009fce:	e7f9      	b.n	8009fc4 <memset+0x4>

08009fd0 <_init>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr

08009fdc <_fini>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	bf00      	nop
 8009fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe2:	bc08      	pop	{r3}
 8009fe4:	469e      	mov	lr, r3
 8009fe6:	4770      	bx	lr
